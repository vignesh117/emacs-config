#+TITLE: Emacs configuration file
#+AUTHOR: Vignesh Ganapathiraman
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes
* Configuration
** Better defaults
   This configures some sane defaults based on the better defaults packages
   #+BEGIN_SRC emacs-lisp
    ;; (add-to-list 'load-path "~/.emacs.d/better-defaults")
    ;; (require 'better-defaults)
   #+END_SRC
** Meta

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
    ;; This file replaces itself with the actual configuration at first run.

    ;; We can't tangle without org!
    (require 'org)
    ;; Open the configuration
    (find-file (concat user-emacs-directory "init.org"))
    ;; tangle it
    (org-babel-tangle)
    ;; load it
    (load-file (concat user-emacs-directory "init.el"))
    ;; finally byte-compile it
    (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
    git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
    git update-index --no-assume-unchanged init.el
   #+END_SRC

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
    ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
      (defun tangle-init ()
        "If the current buffer is 'init.org' the code-blocks are
      tangled, and the tangled file is compiled."
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "init.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
            (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el"))
            (if (file-exists-p "init.elc") (delete-file "init.elc")) 
   ))
        )

      (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC
** Package config
   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp
    (require 'cl)
    (require 'package)
    (package-initialize)
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

    (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
   #+END_SRC
** Default packages
   These are some default packages that emacs needs to have by
   default. Other packages will be deferred subject to requirement.

   #+BEGIN_SRC emacs-lisp
   (let* ((package--builtins nil)
          (packages
           '(auto-compile         ; automatically compile Emacs Lisp libraries
             use-package          ; Great package manager with nifty features
             undo-tree            ; Neat undo
             sublime-themes       ; Heavily inspired themes from sublime text
             powerline	       ; Powerline for emacs
             goto-chg             ; Required by evil
             evil                 ; Basic vim emulation 
             evil-nerd-commenter  ; Commenting system that goes with evil
             company              ; Modular text completion framework
             define-word          ; display the definition of word at point
             diminish             ; Diminished modes from modeline
             expand-region        ; Increase selected region by semantic units
             golden-ratio         ; Automatic resizing windows to golden ratio
             helm                 ; Incremental and narrowing framework
             helm-ag              ; the silver searcher with helm interface
             helm-company         ; Helm interface for company-mode
             helm-dash            ; Offline documentation using Dash docsets.
             helm-projectile      ; Helm integration for Projectile
             helm-swoop           ; Efficiently hopping squeezed lines
             magit                ; control Git from Emacs
             markdown-mode        ; Emacs Major mode for Markdown-formatted files
             matlab-mode          ; MATLAB integration with Emacs
             multiple-cursors     ; Multiple cursors for Emacs
             yasnippet            ; Superb template completion framework
             org                  ; Outline-based notes management and organizer
             org-ref              ; citations bibliographies in org-mode
             pdf-tools            ; Emacs support library for PDF files
             projectile           ; Manage and navigate projects in Emacs easily
             try                  ; Try out Emacs packages
             ag                   ; powerful silver searcher plugib
             helm-ag-r            ; helm wrapper for ag
             swiper               ; Search
             smex                 ; alternative mx
             realgud              ; great debugging framework
             which-key)))         ; Display available keybindings in popup
     (ignore-errors ;; This package is only relevant for Mac OS X.
       (when (memq window-system '(mac ns))
         (push 'exec-path-from-shell packages)
         (push 'reveal-in-osx-finder packages))
       (let ((packages (remove-if 'package-installed-p packages)))
         (when packages
           ;; Install uninstalled packages
           (package-refresh-contents)
           (mapc 'package-install packages)))))
   #+END_SRC
** Mac OS based config
   Switches meta to command from option
   #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (setq ns-pop-up-frames nil
            mac-option-modifier nil
            mac-command-modifier 'meta
            select-enable-clipboard t)
      (exec-path-from-shell-initialize)
      (when (fboundp 'mac-auto-operator-composition-mode)
        (mac-auto-operator-composition-mode 1)))'
   #+END_SRC
** Default configs
   I've used the better-defaults package to get some basic
   configuration working. Some additional configurations are added
   here

   #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 79                    ; Maximum line width
                  truncate-lines t                  ; Don't fold lines
                  split-width-threshold 160         ; Split verticly by default
                  split-height-threshold nil        ; Split verticly by default
                  auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
   #+END_SRC
   
   Don't ask "yes/No" questions, instead ask "y/n" questions
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
   
   Start emacs-server
   #+BEGIN_SRC emacs-lisp
   (server-start)
   #+END_SRC
*** Eye candy
    #+BEGIN_SRC emacs-lisp
    ;; (load-theme 'whiteboard t)
    (load-theme 'spolsky t)			;sublime based theme
    #+END_SRC
  
Powerline for emacs 
#+BEGIN_SRC emacs-lisp
(powerline-vim-theme) 
#+END_SRC 

   

    Diminish some modes form modeline
    
    #+BEGIN_SRC emacs-lisp
        (defmacro safe-diminish (file mode &optional new-name)
          `(with-eval-after-load ,file
             (diminish ,mode ,new-name)))

        (diminish 'auto-fill-function)
        (safe-diminish "eldoc" 'eldoc-mode)
        (safe-diminish "company" 'company-mode)
        (safe-diminish "undo-tree" 'undo-tree-mode)
        (safe-diminish "flyspell" 'flyspell-mode)
        (safe-diminish "helm-mode" 'helm-mode)
        (safe-diminish "projectile" 'projectile-mode)
        (safe-diminish "evil-org" 'evil-org-mode) 
        (safe-diminish "paredit" 'paredit-mode "()") 
    #+END_SRC
*** Default packages
    Enable several packages by default. These are typically used
    throughout the config on all the major modes.
    #+BEGIN_SRC emacs-lisp
     (dolist (mode
              '(abbrev-mode                  ; E.g. sopl -> System.out.println
                column-number-mode           ; Show column number in mode line
                delete-selection-mode        ; Replace selected text
                dirtrack-mode                ; directory tracking in *shell*
                global-company-mode          ; Auto-completion everywhere
                projectile-global-mode       ; Manage and navigate projects
                show-paren-mode              ; Highlight matching parentheses
                which-key-mode))             ; Available keybindings in popup
       (funcall mode 1))
    #+END_SRC
    
    Basic company mode config
    #+BEGIN_SRC emacs-lisp
    (setq company-idle-delay 0
          company-minimum-prefix-length 3
          company-selection-wrap-around t)  ;wrapping around list of selections when scrolling

    #+END_SRC
** Modes
   Now we write down language specific (python, latex, org, etc.) or
   feature specific (spelling, autocompletion etc.) configuration
*** Spelling
    For spell-checking we will use the wonderful flyspell package. We
    will enable flyspell for all text-mode buffers and comment regions
    for prog-mode buffers. This is the standard practise
    #+BEGIN_SRC emacs-lisp
    ;; (add-hook 'text-mode-hook 'turn-on-flyspell)
    ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+END_SRC

    Addtionally for correcting spelling (or getting suggestions for
    corrections), we will use a nice wrapper called
    =fly-spell-correct= [[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] via helm

    #+BEGIN_SRC emacs-lisp
     (use-package flyspell-correct-helm
       :ensure t
       :bind ("C-;" . flyspell-correct-wrapper)
       :init
       (setq flyspell-correct-interface #'flyspell-correct-helm))
    #+END_SRC
*** Windowing
    Ace-window mode provides comprehensive functions and keybindings
    to move and manipulate windows.
    #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :config
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       (setq ace-ignore-current t)
       :bind ("M-o" . ace-window))


    #+END_SRC
*** Helm
    Helm
    #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :config
       (setq helm-split-window-in-side-p t
             helm-M-x-fuzzy-match t
             helm-buffers-fuzzy-matching t
             helm-recentf-fuzzy-match t
             helm-move-to-line-cycle-in-source t
             projectile-completion-system 'helm)
       :bind  (("M-<f5>" . helm-find-files)
              ([f10] . helm-buffers-list)
              ([S-f10] . helm-recentf))
       )
     (helm-mode 1)
     (helm-projectile-on)
     (helm-adaptive-mode 1)

    #+END_SRC 
*** Deft mode
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :bind ("<f8>" . 'deft)
  :config
  (setq deft-directory "/Users/vigneshganapathiraman/Dropbox/notes"
        deft-extensions '("md" "org"))
  )
#+END_SRC
*** Python mode
    We will use anaconda mode for python.
    #+BEGIN_SRC emacs-lisp
    (require 'rx)
    (use-package company-anaconda
      :requires (rx)
      :after (python anaconda)
      :ensure t)

    (use-package anaconda-mode
      :ensure t
      :after (python)
      :config
      (setq python-shell-interpreter "/Users/vigneshganapathiraman/anaconda3/bin/python")
      (defun vig/python-shell-send-line ()
        "send the current line to python repl"
        (interactive)
        (python-shell-send-region
         (progn (forward-visible-line 0) (point))
         (progn (forward-visible-line 1) (point))
         )
        )

      (defun vig/python-shell-send-fun-and-move ()
        "sends the current function to repl and moves one paragraph"
        (interactive)
        (progn
          (python-shell-send-defun)
          (forward-paragraph))
        )
      (add-hook 'python-mode-hook
                (lambda ()
                  (anaconda-mode)
                  (anaconda-eldoc-mode)
                  (yas-minor-mode)
                  (yas-reload-all)))
      (add-to-list 'company-backends #'company-anaconda)
      :bind (:map python-mode-map (
                                   ("M-RET" . 'vig/python-shell-send-line)
                                   ("<C-return>" . 'vig/python-shell-send-fun-and-move)
                                   ("<S-return>" . 'python-shell-send-region)
                                   ))
      )

    #+END_SRC
*** Org mode
    1. *Babel*: Org babel lets you to write and execute a lot of
       languages within org mode
       #+BEGIN_SRC emacs-lisp
       ;; active Babel languages
       (use-package org
         :defer t
         :config
           (org-babel-do-load-languages
           'org-babel-load-languages
           '((R . t)
           (emacs-lisp . t)
           (python . t)))

           ;; When editing org-files with source-blocks, we want the source
           ;; blocks to be themed as they would in their native mode.
    
           (setq org-src-fontify-natively t
                 org-src-tab-acts-natively t
                 org-confirm-babel-evaluate nil
                 org-edit-src-content-indentation 0
                 org-adapt-indentation nil
                 org-hide-leading-stars 1
                 org-src-mode 1
                 )
           )
       #+END_SRC
    2. Some default configs while editing files in org mode
       #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook 'auto-fill-mode)
       (add-hook 'org-mode-hook 'org-indent-mode)
       #+END_SRC
    3. Evil-org provides much needed navigation in org mode
       #+BEGIN_SRC emacs-lisp
       (use-package evil-org
         :ensure t
         :after org
         :config
         (add-hook 'org-mode-hook 'evil-org-mode)
         (add-hook 'evil-org-mode-hook
                   (lambda ()
                     (evil-org-set-key-theme))))
       #+END_SRC

*** latex
    We will use the wonderful auctex mode
    #+BEGIN_SRC emacs-lisp
    (setq reftex-default-bibliography "/Users/vigneshganapathiraman/bibliography/references_zotero.bib")
    (use-package reftex
      :ensure t
      :after auctex
      :config
      (setq reftex-enable-partial-scans t)
      (setq reftex-save-parse-info t)
      (setq reftex-use-multiple-selection-buffers t)
      (setq reftex-plug-into-AUCTeX t)
      (setq reftex-label-alist '(AMSTeX))   ;enable eqref inside reftex

      ) 

    (use-package tex-site
      :ensure auctex
      :mode ("\\.tex\\'" . latex-mode)
      :defer t
      :config
      (setq-default bibtex-dialect 'biblatex)
      (add-hook 'LaTeX-mode-hook
                (lambda ()
                  (turn-on-reftex)
                  (turn-on-auto-fill)
                  (latex-math-mode)
                  (TeX-PDF-mode t)
                  (yas-minor-mode)
                  (yas-reload-all)
                  (TeX-source-correlate-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
                  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
                  (setq TeX-view-program-list
                        '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

                  (server-start); start emacs in server mode so that skim can talk to it(setq TeX-source-correlate-start-server t)
                  ))
      ) 
    (use-package auctex-latexmk
      :ensure t
      :after auctex
      :config
      (auctex-latexmk-setup)
      )


    #+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t)
(setq auto-mode-alist 
      (cons '("\\.md" . markdown-mode) auto-mode-alist))
#+END_SRC

*** matlab
#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :ensure t
  :mode ("\\.m\\'" . matlab-mode)
  :bind ("C-RET" . 'matlab-shell-run-region-or-line)
  :config
  (setq matlab-shell-echoes nil)
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
  (company-mode)
)
#+END_SRC

*** ESS
ESS (/Emacs speaks statistics/) is a comprehensive package for using statistcs related packagse in
emacs. I mostly use it to interact with R and write R code. 
#+BEGIN_SRC emacs-lisp
(use-package ess
  :ensure t
  :defer t
  :mode ("\\.R\\'" . ess-r-mode)
  :config
  (lambda ()
    (flymake-mode-off))
  )
#+END_SRC
*** EVIL 
Here we configure evil and install a host of other packages that work
amazingly well with evil. Let us first start by enabling evil mode 
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

1. Evil-matchit
   This is a cool package that lets us jump to matched paranthesis
   with a =%=. 
   #+BEGIN_SRC emacs-lisp
   (use-package evil-matchit
     :requires evil
     :ensure t)
   #+END_SRC
2. Evil requires the =undo-tree= and the =go-chg= package, which lets
   us to switch to the last edited change via =g;= and the infamous
   =.= keybinding which allows us to repeat the last action. We have
   moved this installation in the require packages list above.
3. Evil-surround
   Gives vim-like surround capabilities. 
   #+BEGIN_SRC emacs-lisp
   (use-package evil-surround
     :ensure t
     :defer t
     :after org)
   #+END_SRC
   
*** general
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t)
#+END_SRC
** Utility functions
   This functions comments a line or region
   #+BEGIN_SRC emacs-lisp
    (defun comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if there's no active region."
      (interactive)
      (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
          (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        (next-line)))
   #+END_SRC

   This tidies the entire buffer
   #+BEGIN_SRC emacs-lisp
    (defun vig/tidy ()
      "Ident, untabify and unwhitespacify current buffer, or region if active."
      (interactive)
      (let ((beg (if (region-active-p) (region-beginning) (point-min)))
            (end (if (region-active-p) (region-end) (point-max))))
        (indent-region beg end)
        (whitespace-cleanup)
        (untabify beg (if (< end (point-max)) end (point-max)))))
   #+END_SRC
* Keybindings
** Expand region
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C->") 'er/expand-region)
    (global-set-key (kbd "C-<") 'er/contact-region)
   #+END_SRC
** Comment
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-:") 'comment-or-uncomment-region-or-line)
   #+END_SRC
** Utility functions
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<C-tab>") 'vig/tidy)
   #+END_SRC
** EVIL
These are evil specific keybindings. All definitions use general.el 

1. M-x 
    #+BEGIN_SRC emacs-lisp
    (general-define-key
     :keymaps '(normal insert emacs)
     "M-x" 'smex
     "C-s" 'helm-swoop
     "C-e" 'end-of-line
     "C-a" 'beginning-of-visual-line
     "M-+" 'text-scale-increase
     "M-_" 'text-scale-decrease
     )
    #+END_SRC

2. Spacemacs type bindings
    #+BEGIN_SRC emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"

    ;; general
    "SPC" 'smex
    ;; Window configuations
    "w m" 'delete-other-windows
    "w d" 'delete-window
    "w o" 'ace-window
    "w h" 'windmove-left
    "w l" 'windmove-right
    "w 2" 'split-window-horizontally
    "w =" 'balance-windows

    ;; Buffer configurations
    "b d" 'kill-buffer
    "b k" 'kill-buffer-and-window
    "b b" 'helm-buffers-list
    "[ [" 'previous-buffer
    "] ]" 'next-buffer

    ;; File management
    "f f" 'helm-find-files
    "f r" 'helm-recentf
    "f d" 'dired-jump-other-window

    ;; Search
    "/" 'helm-swoop
    "s a f" 'helm-ag-r-current-file
    "s a g" 'helm-ag-r-from-git-repo 

    ;; toggles
    "t f" 'auto-fill-mode

    ;; quit
    "q q" 'save-buffers-kill-emacs

    ;; Register bindings
    "r y" 'helm-show-kill-ring
    )
    #+END_SRC
*** EVIL python
Spacemacs like config for python
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'python-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 ;; python shell
 "p" 'run-python
 "s z" 'python-shell-switch-to-shell
 "s l" 'vig/python-shell-send-line
 "s f" 'vig/python-shell-send-fun-and-move
 "s b" 'python-shell-send-buffer

 ;; navigation using anaconda
 "g d" 'anaconda-mode-find-definitions
 "g a" 'anaconda-mode-find-assignments
 "g r" 'anaconda-mode-find-assignments-other-frame)

;; visual mode bindings
(general-define-key
 :states '(visual)
 :keymaps 'python-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 "s r" 'python-shell-send-region)
#+END_SRC
*** EVIL matlab
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'matlab-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"

 ;; Running 
 "p" 'matlab-shell
 "," 'matlab-shell-run-region-or-line
 "r r" 'matlab-shell-run-region
 "r c" 'matlab-shell-run-cell

 ;; Commenting
 "i f" 'matlab-indent-function-body
 "i l" 'matlab-indent-line
 )
#+END_SRC
*** EVIL org 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'org-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 "e e" 'org-export-dispatch
 "n n" 'org-narrow-to-subtree
 "n w" 'widen)
 #+END_SRC
*** EVIL latex 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"

 ;; Building
 "," 'LaTeX-command-section
 "v" 'TeX-view
 "." 'LaTeX-mark-environment

 ;; previews
 "p e" 'preview-environment
 "p b" 'preview-buffer
 "p d" 'preview-document
 "p p" 'preview-at-point

 ;; preview / clear
 "p c r" 'preview-clearout
 "p c s" 'preview-clearout-section
 "p c p" 'preview-clearout-at-point

 ;; inserts
 "s" 'LaTeX-section
 "e" 'LaTeX-environment
 "c" 'LaTeX-close-environment

 ;; citation
 "r c" 'reftex-citation
 "r r" 'reftex-reference
 "r =" 'reftex-toc
 "r p" 'reftex-citep

 ;; fill
 "f s" 'LaTeX-fill-section
 "f p" 'LaTeX-fill-paragraph
 "f b" 'LaTeX-fill-buffer
 "f e" 'LaTeX-fill-environment
 )

(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 "<S-return>" 'LaTeX-insert-item)



#+END_SRC
*** EVIL commenting 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal insert emacs visual)
 :prefix "\\"
 :non-normal-prefix "M-S-\\"
 "l l" 'evilnc-quick-comment-or-uncomment-to-the-line
 "c c" 'evilnc-comment-or-uncomment-lines
 "c p" 'evilnc-comment-or-uncomment-paragraphs
 "c r" 'comment-or-uncomment-region
 "c v" 'evilnc-toggle-invert-comment-line-by-line
  "."  'evilnc-copy-and-comment-operator)
#+END_SRC
*** EVIL multilple cursors
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal)
 :prefix "SPC"
 :non-normal-prefix "M-S-m"
 "m w" 'mc/mark-next-word-like-this
 "m l" 'mc/mark-next-lines
 "m d" 'mc/mark-all-dwim
 "m c"  'mc/add-cursor-on-click)


(general-define-key
 :keymaps '(visual)
 "M-d" 'mc/mark-next-word-like-this)
#+END_SRC
When in visual model (especially after selecting a word using =expand
region=, we could mark the next occurance of the word by pressing
=M-d=. 
*** EVIL Navigation
Setting up keybindings for the efficient navigation using =avy=
navigation functions. =avy-goto-char= lets you to navigate to any
arbitrary word in a buffer by just typing a few keystrokes - very fast
indeed in practise. 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal)
 :prefix "SPC"
 :non-normal-prefix "M-S-SPC"
 "g g" 'avy-goto-char
 "g w" 'avy-goto-word-0
 "g b" 'avy-goto-char-2-above)

(general-define-key
 :keymaps '(normal)
 "Q" 'delete-window)
#+END_SRC
