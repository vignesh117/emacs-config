#+TITLE: Emacs configuration file
#+AUTHOR: Vignesh Ganapathiraman
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes
* Configuration
** Better defaults
   This configures some sane defaults based on the better defaults packages
   #+BEGIN_SRC emacs-lisp
    ;; (add-to-list 'load-path "~/.emacs.d/better-defaults")
    ;; (require 'better-defaults)
   #+END_SRC
** Meta

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
    ;; This file replaces itself with the actual configuration at first run.

    ;; We can't tangle without org!
    (require 'org)
    ;; Open the configuration
    (find-file (concat user-emacs-directory "init.org"))
    ;; tangle it
    (org-babel-tangle)
    ;; load it
    (load-file (concat user-emacs-directory "init.el"))
    ;; finally byte-compile it
    (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
    git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
    git update-index --no-assume-unchanged init.el
   #+END_SRC

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
    ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
      (defun tangle-init ()
        "If the current buffer is 'init.org' the code-blocks are
      tangled, and the tangled file is compiled."
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "init.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
            (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el"))
            (if (file-exists-p "init.elc") (delete-file "init.elc")) 
   ))
        )

      (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC
** Package config
   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp
    (require 'cl)
    (require 'package)
    (package-initialize)
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

    (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
   #+END_SRC
** Default packages
   These are some default packages that emacs needs to have by
   default. Other packages will be deferred subject to requirement.

   #+BEGIN_SRC emacs-lisp
   (let* ((package--builtins nil)
          (packages
           '(ag                   ; powerful silver searcher plugib
             auto-compile         ; automatically compile Emacs Lisp libraries
             company              ; Modular text completion framework
             deadgrep	       ; Powerful grep 
             define-word          ; display the definition of word at point
             doom-themes	       ;Another amazing theme
             dracula-theme	       ; Theme
             diminish             ; Diminished modes from modeline
             expand-region        ; Increase selected region by semantic units
             evil                 ; Basic vim emulation 
             evil-nerd-commenter  ; Commenting system that goes with evil
             goto-chg             ; Required by evil
             golden-ratio         ; Automatic resizing windows to golden ratio
             gruvbox-theme	       ;Another inspirational theme 
             helm                 ; Incremental and narrowing framework
             ;; helm-ag              ; the silver searcher with helm interface
             ;; helm-projectile      ; Helm wrapper for projectile
             ;; helm-rg	       ; Wrapper for rg
             ;; helm-company         ; Helm interface for company-mode
             ;; helm-dash            ; Offline documentation using Dash docsets.
             hydra		      ; Another nice aboabo package for persisten keys
             magit                ; control Git from Emacs
             markdown-mode        ; Emacs Major mode for Markdown-formatted files
             matlab-mode          ; MATLAB integration with Emacs
             multiple-cursors     ; Multiple cursors for Emacs
             multi-term	      ; A terminal application that respects the shell config
             org                  ; Outline-based notes management and organizer
             projectile	       ; Project management
             powerline	       ; Powerline for emacs
             projectile	       ; Project management
             ranger	       ; Amazing file manager
             realgud              ; great debugging framework
             rg		       ; An even faster search optinon compared to ag 
             smex                 ; alternative mx
             sr-speedbar	       ; VIM-like tagbar and file list
             sublime-themes       ; Heavily inspired themes from sublime text
             swiper               ; Search
             try                  ; Try out Emacs packages
             use-package          ; Great package manager with nifty features
             which-key
             undo-tree            ; Neat undo
             yasnippet            ; Superb template completion framework
             ;; helm-ag-r            ; helm wrapper for ag
             )))         ; Display available keybindings in popup
     (ignore-errors ;; This package is only relevant for Mac OS X.
       (when (memq window-system '(mac ns))
         (push 'exec-path-from-shell packages)
         (push 'reveal-in-osx-finder packages))
       (let ((packages (remove-if 'package-installed-p packages)))
         (when packages
           ;; Install uninstalled packages
           (package-refresh-contents)
           (mapc 'package-install packages)))))
   #+END_SRC
** Mac OS based config
   Switches meta to command from option
   #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (setq ns-pop-up-frames nil
            mac-option-modifier nil
            mac-command-modifier 'meta
            select-enable-clipboard t)
      (exec-path-from-shell-initialize)
      (when (fboundp 'mac-auto-operator-composition-mode)
        (mac-auto-operator-composition-mode 1)))'
   #+END_SRC
** Default configs
   I've used the better-defaults package to get some basic
   configuration working. Some additional configurations are added
   here

   #+BEGIN_SRC emacs-lisp
   (setq-default fill-column 79                    ; Maximum line width
                 truncate-lines t                  ; Don't fold lines
                 split-width-threshold 160         ; Split verticly by default
                 split-height-threshold nil        ; Split verticly by default
                 auto-fill-function 'do-auto-fill  ; Auto-fill-mode everywhere
                 )	; Relative line numbering by default

   #+END_SRC
   
   Don't ask "yes/No" questions, instead ask "y/n" questions
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
   
   Start emacs-server
   #+BEGIN_SRC emacs-lisp
   ;; (server-start)
   #+END_SRC
*** Eye candy
    #+BEGIN_SRC emacs-lisp
        (load-theme 'doom-dracula t)
        ;; (set-face-attribute 'default nil :height 120)

        (set-frame-font "Fira Code 14" nil t)
        (use-package doom-modeline
              :ensure t
              :hook (after-init . doom-modeline-mode)
              :config
              (setq doom-modeline-env-python-executable "python")

              ;; Whether display perspective name or not. Non-nil to display in mode-line.
              (setq doom-modeline-persp-name t)

              ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
              (setq doom-modeline-lsp nil)

              ;; Whether display github notifications or not. Requires `ghub` package.
              (setq doom-modeline-github nil)
              ;; Whether display minor modes in mode-line or not.
              (setq doom-modeline-minor-modes nil)

              ;; If non-nil, a word count will be added to the selection-info modeline segment.
              (setq doom-modeline-enable-word-count nil)

              ;; If non-nil, only display one number for checker information if applicable.
              (setq doom-modeline-checker-simple-format t)
              ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
              (setq doom-modeline-major-mode-icon t)

              ;; Whether display color icons for `major-mode'. It respects
              ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
              (setq doom-modeline-major-mode-color-icon t)

              ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
              (setq doom-modeline-buffer-state-icon t)

              ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
              ;; and `doom-modeline-buffer-state-icon'.
              (setq doom-modeline-buffer-modification-icon t)

    ) 

    #+END_SRC
    
    Other UI refinements
    #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    #+END_SRC
  
Powerline for emacs 
#+BEGIN_SRC emacs-lisp
(powerline-vim-theme) 
#+END_SRC 

   

    Diminish some modes form modeline
    
    #+BEGIN_SRC emacs-lisp
    (defmacro safe-diminish (file mode &optional new-name)
      `(with-eval-after-load ,file
         (diminish ,mode ,new-name)))

    (diminish 'auto-fill-function)
    (safe-diminish "eldoc" 'eldoc-mode)
    (safe-diminish "company" 'company-mode)
    (safe-diminish "undo-tree" 'undo-tree-mode)
    (safe-diminish "flyspell" 'flyspell-mode)
    ;; (safe-diminish "helm-mode" 'helm-mode)
    (safe-diminish "ivy-mode" 'ivy-mode)
    (safe-diminish "evil-org" 'evil-org-mode) 
    (safe-diminish "paredit" 'paredit-mode "()") 
    #+END_SRC
*** Default package config (mostly setting global modes)
    Enable several packages by default. These are typically used
    throughout the config on all the major modes.
    #+BEGIN_SRC emacs-lisp
    (dolist (mode
             '(abbrev-mode                  ; E.g. sopl -> System.out.println
               column-number-mode           ; Show column number in mode line
               delete-selection-mode        ; Replace selected text
               dirtrack-mode                ; directory tracking in *shell*
               global-company-mode          ; Auto-completion everywhere
               projectile-mode		; Global projectile mode
               projectile-mode		  ; Global projectile mode
               show-paren-mode              ; Highlight matching parentheses
               which-key-mode))             ; Available keybindings in popup
      (funcall mode 1)
      (tooltip-mode -1))
    #+END_SRC
    
    Basic company mode config
    #+BEGIN_SRC emacs-lisp
    ;; (setq company-minimum-prefix-length 3
    ;;       company-selection-wrap-around t)  ;wrapping around list of selections when scrolling
    ;; (setq company-selection-wrap-around t)
    ;; (setq company-dabbrev-downcase 0)
    ;; (setq company-idle-delay nil)

    ;;  (global-set-key "\t" 'company-complete-common)
    ;; ;; got this from https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/
    ;; ;; (setq company-transformers '(company-sort-by-occurrence))

    ;; ;; Add yasnippet support for all company backends
    ;; ;; https://github.com/syl20bnr/spacemacs/pull/179
    ;; ;; (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

    ;; (defun company-mode/backend-with-yas (backend)
    ;;   (if (or (not company-mode/enable-yas) (and (listp backend)    (member 'company-yasnippet backend)))
    ;;   backend
    ;; (append (if (consp backend) backend (list backend))
    ;;         '(:with company-yasnippet))))

    ;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))



    #+END_SRC
    
    Disabling suggestions automatically by company mode 
    #+BEGIN_SRC emacs-lisp
    ;;; Prevent suggestions from being triggered automatically. In particular,
     ;;; this makes it so that:
     ;;; - TAB will always complete the current selection.
     ;;; - RET will only complete the current selection if the user has explicitly
     ;;;   interacted with Company.
     ;;; - SPC will never complete the current selection.
     ;;;
     ;;; Based on:
     ;;; - https://github.com/company-mode/company-mode/issues/530#issuecomment-226566961
     ;;; - https://emacs.stackexchange.com/a/13290/12534
     ;;; - http://stackoverflow.com/a/22863701/3538165
     ;;;
     ;;; See also:
     ;;; - https://emacs.stackexchange.com/a/24800/12534
     ;;; - https://emacs.stackexchange.com/q/27459/12534

     ;; <return> is for windowed Emacs; RET is for terminal Emacs
     ;; (dolist (key '("<return>" "RET"))
     ;;   ;; Here we are using an advanced feature of define-key that lets
     ;;   ;; us pass an "extended menu item" instead of an interactive
     ;;   ;; function. Doing this allows RET to regain its usual
     ;;   ;; functionality when the user has not explicitly interacted with
     ;;   ;; Company.
     ;;   (define-key company-active-map (kbd key)
     ;;     `(menu-item nil company-complete
     ;;                 :filter ,(lambda (cmd)
     ;;                            (when (company-explicit-action-p)
     ;;                              cmd)))))
     ;; (define-key company-active-map (kbd "TAB") #'company-complete-selection)
     ;; (define-key company-active-map (kbd "SPC") nil)

     ;; Company appears to override the above keymap based on company-auto-complete-chars.
     ;; Turning it off ensures we have full control.
     (setq company-auto-complete-chars nil)
    #+END_SRC
*** Fixing scrolling issue in emacs
Fix coming from the following stackoverflow post https://stackoverflow.com/questions/3631220/fix-to-get-smooth-scrolling-in-emacs
#+BEGIN_SRC emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  ;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
  ;; (setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
  ;; (setq-default smooth-scroll-margin 0)
  ;; (setq scroll-step 1
  ;;       scroll-margin 1
  ;;       scroll-conservatively 100000)

  ;; (use-package pager
  ;;   :ensure t)

  ;; (use-package pager-default-keybindings
  ;;   :ensure t)
  ;; (require 'pager-default-keybindings)


#+END_SRC
** Modes
   Now we write down language specific (python, latex, org, etc.) or
   feature specific (spelling, autocompletion etc.) configuration
*** Spelling
    For spell-checking we will use the wonderful flyspell package. We
    will enable flyspell for all text-mode buffers and comment regions
    for prog-mode buffers. This is the standard practise
    #+BEGIN_SRC emacs-lisp
    ;; (add-hook 'text-mode-hook 'turn-on-flyspell)
    ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+END_SRC

    Addtionally for correcting spelling (or getting suggestions for
    corrections), we will use a nice wrapper called
    =fly-spell-correct= [[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] via helm

    #+BEGIN_SRC emacs-lisp
    ;; (use-package flyspell-correct-helm
    ;;   :ensure t
    ;;   :bind ("C-;" . flyspell-correct-wrapper)
    ;;   :init
    ;;   (setq flyspell-correct-interface #'flyspell-correct-helm))
    ;; Flyspell correct via ivy

    (use-package flyspell-correct-ivy
      :ensure t
      :bind ("C-;" . flyspell-correct-wrapper)
      :init
      (setq flyspell-correct-interface #'flyspell-correct-ivy))
    #+END_SRC
*** Window navigation
    Ace-window mode provides comprehensive functions and keybindings
    to move and manipulate windows.
    #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :config
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       (setq ace-ignore-current t)
       :bind ("M-o" . ace-window))


    #+END_SRC
*** Helm
    Helm
    #+BEGIN_SRC emacs-lisp
    ;; (use-package helm
    ;;   :ensure t
    ;;   :config
    ;;   (setq helm-split-window-in-side-p t
    ;;         helm-M-x-fuzzy-match t
    ;;         helm-buffers-fuzzy-matching t
    ;;         helm-recentf-fuzzy-match t
    ;;         helm-move-to-line-cycle-in-source t)
    ;;   :bind  (("M-<f5>" . helm-find-files)
    ;;          ([f10] . helm-buffers-list)
    ;;          ([S-f10] . helm-recentf))
    ;;   )
    ;; (helm-mode 1)
    ;; (helm-adaptive-mode 1)

    #+END_SRC 
*** Ivy
Light weight alternative to helm
#+BEGIN_SRC emacs-lisp 
(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map
   ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))
#+END_SRC
*** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)
#+END_SRC
*** Deft mode
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :bind ("<f8>" . 'deft)
  :config
  (setq deft-directory "/Users/vigneshganapathiraman/Dropbox/notes"
        deft-extensions '("md" "org"))
  )
#+END_SRC
*** Python mode
    We will use anaconda mode for python.
    #+BEGIN_SRC emacs-lisp
      (require 'rx)
      (use-package company-anaconda
        :requires (rx)
        :after (python anaconda)
        :ensure t)

      (use-package pyvenv
        :ensure t)

      (use-package anaconda-mode
        :ensure t
        :after (python)
        :config
        (setq python-shell-interpreter "python")
        (defun vig/python-shell-send-line ()
          "send the current line to python repl"
          (interactive)
          (python-shell-send-region
           (progn (forward-visible-line 0) (point))
           (progn (forward-visible-line 1) (point))
           )
          )


        (defun vig/python-shell-send-fun-and-move ()
          "sends the current function to repl and moves one paragraph"
          (interactive)
          (progn
            (python-shell-send-defun)
            (forward-paragraph))
          )
       (defun my-restart-python-console ()
        "Restart python console before evaluate buffer or region to
          avoid various uncanny conflicts, like not reloding modules even
          when they are changed"
        (interactive)
        (kill-process "Python")
        (kill-buffer "*Python*")
        (run-python))

        (add-hook 'python-mode-hook
                  (lambda ()
                    (anaconda-mode)
                    (company-mode)
                    (anaconda-eldoc-mode)
                    ;; (yas-minor-mode)
                    ;; (yas-reload-all)
                    (pyvenv-mode)
                    (flycheck-mode)))
        ;; (add-to-list 'company-backends #'company-anaconda)
        (eval-after-load "company"
        '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
        (flycheck-mode)
        :bind (:map python-mode-map (
                                     ("M-RET" . 'vig/python-shell-send-line)
                                     ("<C-return>" . 'vig/python-shell-send-fun-and-move)
                                     ("<S-return>" . 'python-shell-send-region)
                                     ))
        )

      ;; Enable flycheck mode in python
      (use-package flycheck
        :ensure t
        :defer t
      )
      (use-package flycheck-pycheckers
        :ensure t
        :defer t)

    #+END_SRC
    
    Highlight indent guide mode for highlighting indentation. This is
    especially useful if we are having long blocks of python code.

    #+BEGIN_SRC emacs-lisp
    (use-package highlight-indent-guides
      :ensure t
      :after (python))

    #+END_SRC
    # Use this awesome package by abo-abo called =lpy-mode=
    #+BEGIN_SRC emacs-lisp
    ;; (use-package lispy
    ;;   :ensure t)
    ;; (if (not 
    ;;      (file-directory-p "~/.emacs.d/lpy") )
    ;;      (shell-command "git clone https://github.com/abo-abo/lpy.git ~/.emacs.d/lpy")
    ;;      (message "lpy exists"))
    ;; (add-to-list 'load-path "~/.emacs.d/lpy")
    ;; (require 'lpy)
    ;; (add-hook 'python-mode-hook 'lpy-mode)
    #+END_SRC
    
    Set the interpreter to the torch mode 
    #+BEGIN_SRC emacs-lisp
      (setq python-shell-interpreter "~/anaconda3/envs/torch/bin/python")
    #+END_SRC
*** LSP mode 
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook ((c-mode
          c-or-c++-mode
          ;; python-mode
          web-mode) . lsp)
  :commands lsp
  :config
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-symbol-highlighting nil)
  (use-package lsp-java :after lsp))

(use-package company-lsp
  :commands company-lsp
  :config (setq company-lsp-cache-candidates 'auto))
#+END_SRC
*** Org mode
    1. *Babel*: Org babel lets you to write and execute a lot of
       languages within org mode
       #+BEGIN_SRC emacs-lisp
       ;; active Babel languages
       (use-package org
         :defer t
         :config
           (org-babel-do-load-languages
           'org-babel-load-languages
           '((R . t)
           (emacs-lisp . t)
                 (matlab . t)
                 (latex . t)
           (python . t)))

           ;; When editing org-files with source-blocks, we want the source
           ;; blocks to be themed as they would in their native mode.

           (setq org-src-fontify-natively t
                 ;; org-src-tab-acts-natively t
                 org-confirm-babel-evaluate nil
                 org-adapt-indentation t
                 org-hide-leading-stars nil
                 )
           )
       #+END_SRC
    2. Some default configs while editing files in org mode
       #+BEGIN_SRC emacs-lisp
       ;; (add-hook 'org-mode-hook 'auto-fill-mode)
       (add-hook 'org-mode-hook 'org-indent-mode)
       #+END_SRC
    3. Evil-org provides much needed navigation in org mode
       #+BEGIN_SRC emacs-lisp
       (use-package evil-org
         :ensure t
         :after org
         :defer t
         :config
         (add-hook 'org-mode-hook 'evil-org-mode)
         (add-hook 'evil-org-mode-hook
                   (lambda ()
                     (evil-org-set-key-theme))))
       #+END_SRC
    4. Reference management using org-ref 
       #+BEGIN_SRC emacs-lisp
       (use-package org-ref
         :ensure t
         :defer t
         :after org
         :config
         (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references_zotero.bib")
         )
       #+END_SRC
    5. Org pandoc : conversion between several formats via org-export
       #+BEGIN_SRC emacs-lisp 
       (use-package ox-pandoc
         :ensure t
         :defer t)
       #+END_SRC
    6. Ox reveal for amazing presentations 
       #+BEGIN_SRC emacs-lisp
       (use-package ox-reveal
         :ensure ox-reveal)

       ;; (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
       (setq org-reveal-root "file:////Users/z0041v0/Downloads/reveal.js")
       (setq org-reveal-mathjax t)

       (use-package htmlize
         :ensure t)
       #+END_SRC

       #+RESULTS:
    7. Org agenda 
        #+BEGIN_SRC emacs-lisp
        (setq org-agenda-files
              '("~/Documents/org/notes.org"))

        #+END_SRC

**** Org mode and latex 
1. Make org latex export use latexmk while exporting documents to pdf 
   #+BEGIN_SRC emacs-lisp
   (setq org-latex-pdf-process
         '("pdflatex -interaction nonstopmode -output-directory %o %f"
           "bibtex %b"
           "pdflatex -interaction nonstopmode -output-directory %o %f"
           "pdflatex -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC
*** latex
    We will use the wonderful auctex mode
    #+BEGIN_SRC emacs-lisp
    (setq reftex-default-bibliography "/Users/vigneshganapathiraman/bibliography/references_zotero.bib")
    (use-package reftex
      :ensure t
      :after auctex
      :config
      (setq reftex-enable-partial-scans t)
      (setq reftex-save-parse-info t)
      (setq reftex-use-multiple-selection-buffers t)
      (setq reftex-plug-into-AUCTeX t)
      (setq reftex-label-alist '(AMSTeX))   ;enable eqref inside reftex

      ) 

    (use-package latex-preview-pane
      :ensure t
      :defer t)

    (use-package tex-site
      :ensure auctex
      :mode ("\\.tex\\'" . latex-mode)
      :defer t
      :config
      (setq-default bibtex-dialect 'biblatex)
      (add-hook 'LaTeX-mode-hook
                (lambda ()
                  (turn-on-reftex)
                  (turn-on-auto-fill)
                  (latex-math-mode)
                  (TeX-PDF-mode t)
                  (yas-minor-mode)
                  (yas-reload-all)
                  (TeX-source-correlate-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
                  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
                  (setq TeX-view-program-list
                        '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

                  ;; Fix indentation
                  (setq LaTeX-indent-level 3)
                  (setq LaTeX-item-indent 3)
                  (setq TeX-brace-indent-level 3)
                  (add-to-list 'company-backends 'company-math-symbols-unicode)
                  ))
      ) 
    (use-package auctex-latexmk
      :ensure t
      :after auctex
      :config
      (auctex-latexmk-setup)
      )

    (use-package company-math
      :ensure t
      :after auctex)


    #+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t)
(setq auto-mode-alist 
      (cons '("\\.md" . markdown-mode) auto-mode-alist))
#+END_SRC

*** matlab
#+BEGIN_SRC emacs-lisp

(defun vig/matlab-shell-send-line ()
  "send the current line to python repl"
  (interactive)
  (matlab-shell-run-region
   (progn (forward-visible-line 0) (point))
   (progn (forward-visible-line 1) (point)) )
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :ensure t
  :mode ("\\.m\\'" . matlab-mode)
  :bind ("C-RET" . 'matlab-shell-run-region-or-line)
  :config
  (setq matlab-shell-echoes nil)
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
  (company-mode)
)
#+END_SRC

*** ESS
ESS (/Emacs speaks statistics/) is a comprehensive package for using statistcs related packagse in
emacs. I mostly use it to interact with R and write R code. However,
recently I'm also using it to program in ~julia~. 
#+BEGIN_SRC emacs-lisp
(use-package ess
  :ensure t
  :defer t
  :mode ("\\.R\\'" . ess-r-mode)
  :config
  (lambda ()
    (flymake-mode-off))
  )
#+END_SRC
*** EVIL 
Here we configure evil and install a host of other packages that work
amazingly well with evil. Let us first start by enabling evil mode 
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

1. Evil-matchit
   This is a cool package that lets us jump to matched paranthesis
   with a =%=. 
   #+BEGIN_SRC emacs-lisp
   (use-package evil-matchit
     :requires evil
     :ensure t)
   #+END_SRC
2. Evil requires the =undo-tree= and the =go-chg= package, which lets
   us to switch to the last edited change via =g;= and the infamous
   =.= keybinding which allows us to repeat the last action. We have
   moved this installation in the require packages list above.
3. Evil-surround
   Gives vim-like surround capabilities. 
   #+BEGIN_SRC emacs-lisp
   ;; (use-package evil-surround
   ;;   :ensure t
   ;;   :defer t
   ;;   :after org)
   #+END_SRC
4. Evil-Magit
   Evil integration with =Magit=
   #+BEGIN_SRC emacs-lisp
   (use-package evil-magit
     :ensure t
     :after (evil magit))
   #+END_SRC
*** general
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t)
#+END_SRC
*** Navigation 
#+BEGIN_SRC emacs-lisp
(use-package sentence-navigation
  :ensure t
  :defer t
  :config
  (define-key evil-motion-state-map ")" 'sentence-nav-evil-forward)
  (define-key evil-motion-state-map "(" 'sentence-nav-evil-backward)
  (define-key evil-motion-state-map "g)" 'sentence-nav-evil-forward-end)
  (define-key evil-motion-state-map "g(" 'sentence-nav-evil-backward-end)
  (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
  (define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence)) 
#+END_SRC
Hydras for manipulating windows 
#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:color red
                        :columns nil)
  "window"
  ("h" windmove-left nil)
  ("j" windmove-down nil)
  ("k" windmove-up nil)
  ("l" windmove-right nil)
  ("H" hydra-move-splitter-left nil)
  ("J" hydra-move-splitter-down nil)
  ("K" hydra-move-splitter-up nil)
  ("L" hydra-move-splitter-right nil)
  ("v" (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right))
       "vert")
  ("x" (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down))
       "horz")
  ("t" transpose-frame "'" :exit t)
  ("o" delete-other-windows "one" :exit t)
  ("a" ace-window "ace")
  ("s" ace-swap-window "swap")
  ("d" ace-delete-window "del")
  ("i" ace-maximize-window "ace-one" :exit t)
  ("b" ido-switch-buffer "buf")
  ("m" headlong-bookmark-jump "bmk")
  ("q" nil "cancel")
  ("u" (progn (winner-undo) (setq this-command 'winner-undo)) "undo")
  ("f" nil))
#+END_SRC
Frog jump mode for super fast buffer jumping
#+BEGIN_SRC emacs-lisp
(use-package frog-jump-buffer
  :ensure t
  :bind ("<f10>" . 'frog-jump-buffer))
#+END_SRC
*** Utils 
#+BEGIN_SRC emacs-lisp
(defun er-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC
*** Remote Editing
1. This is a remote deployment package that can automatically save the project
   contents on to a remote location on save 
   #+BEGIN_SRC emacs-lisp
   (use-package ssh-deploy
     :ensure t
     :demand
     :after hydra
     :hook ((after-save . ssh-deploy-after-save)
            (find-file . ssh-deploy-find-file))
     :config
     (ssh-deploy-line-mode) ;; If you want mode-line feature
     (ssh-deploy-add-menu) ;; If you want menu-bar feature
     (ssh-deploy-hydra "C-c C-z") ;; If you want the hydra feature
     )
   #+END_SRC
*** Smooth scrolling
We will try to use sublimity mode for smooth scrolling and other
interesting features
#+BEGIN_SRC emacs-lisp
  ;; (use-package sublimity
  ;;   :ensure t
  ;;   :config
  ;;   (setq sublimity-scroll-weight 10
  ;; 	sublimity-scroll-drift-length 5
  ;; 	sublimity-attractive-centering-width 110)
  ;;   )
#+END_SRC
*** Centaur tabs
Nice tabs mode for modern UI switching
# Config lifted from https://github.com/ianpan870102/.use-package.emacs.d/blob/master/init.el
#+BEGIN_SRC emacs-lisp
 (use-package centaur-tabs
  :ensure t
  :demand
  :init (setq centaur-tabs-set-bar 'over)
  :config
  (centaur-tabs-mode)
  (centaur-tabs-headline-match)
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker " ● "
        centaur-tabs-cycle-scope 'tabs
        centaur-tabs-height 30
        centaur-tabs-set-icons t
        centaur-tabs-close-button " × ")
  (dolist (centaur-face '(centaur-tabs-selected
                          centaur-tabs-selected-modified
                          centaur-tabs-unselected
                          centaur-tabs-unselected-modified))
    (set-face-attribute centaur-face nil :family "Arial" :height 130))
  :bind
  ("C-S-<tab>" . centaur-tabs-backward)
  ("C-<tab>" . centaur-tabs-forward))
#+END_SRC
* Keybindings
** Expand region
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C->") 'er/expand-region)
    (global-set-key (kbd "C-<") 'er/contact-region)
   #+END_SRC
** Comment
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-:") 'comment-or-uncomment-region-or-line)
   #+END_SRC
** EVIL
*** General Evil bindings
These are evil specific keybindings. All definitions use general.el 

1. M-x 
    #+BEGIN_SRC emacs-lisp
    (general-define-key
     :keymaps '(normal insert emacs)
     "M-x" 'smex
     "C-s" 'swiper-isearch
     "C-e" 'end-of-line
     "C-a" 'beginning-of-visual-line
     "C-k" 'kill-line
     "C-y" 'evil-paste-after
     "M-+" 'text-scale-increase
     "M-_" 'text-scale-decrease
     "C-u" 'evil-scroll-up
     ;; "<f5>" 'helm-mini
     "<f5>" 'ivy-switch-buffer
     "C-M-o" 'hydra-window/body
     "<f6>" 'deadgrep
     )
    #+END_SRC

2. Spacemacs type bindings
    #+BEGIN_SRC emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"

    ;; general
    "SPC" 'smex
    ;; Window configuations
    "w m" 'delete-other-windows
    "w d" 'delete-window
    "w o" 'ace-window
    "w h" 'windmove-left
    "w l" 'windmove-right
    "w 2" 'split-window-horizontally
    "w =" 'balance-windows

    ;; Buffer configurations
    "b d" 'kill-this-buffer			;Kills without asking
    "b k" 'kill-buffer-and-window
    "b b" 'ivy-switch-buffer
    "[ [" 'previous-buffer
    "] ]" 'next-buffer

    ;; Dired
    "a d" 'deer
    "a o a" 'org-agenda

    ;; File management
    ;; "f f" 'helm-find-files
    ;; "f r" 'helm-recentf
    "f f" 'counsel-find-file
    "f r" 'counsel-recentf
    "f d" 'dired-jump-other-window
    "f y" 'er-copy-file-name-to-clipboard

    ;; Imenu
    "i" 'counsel-imenu

    ;; Projectile
    "p f f" 'projectile-find-file
    "p f r" 'projectile-recentf
    "p d" 'projectile-find-dir
    "p k" 'projectile-kill-buffers
    "p s" 'projectile-switch-project
    "p o" 'projectile-switch-open-project
    "p r" 'projectile-replace

    ;; Search
    ;; "/" 'helm-swoop
    "/" 'swiper
    ;; "s a f" 'helm-ag-r-current-file
    "s a f" 'counsel-ag
    ;; "s a g" 'helm-ag-r-from-git-repo 
    "s d" 'rg-dwim
    "s p" 'rg-project
    "s r" 'rg
    "s t" 'rg-literal
    "s l" 'rg-list-searches

    ;; toggles
    "t f" 'auto-fill-mode

    ;; quit
    "q q" 'save-buffers-kill-emacs

    ;; Register bindings
    ;; "r y" 'helm-show-kill-ring
    "r y" 'counsel-yank-pop

    "z" 'ssh-deploy-hydra/body
    )
    #+END_SRC
*** EVIL python
Spacemacs like config for python
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'python-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 ;; python shell
 "p" 'run-python
 "z" 'python-shell-switch-to-shell
 "?" 'anaconda-mode-show-doc
 "s z" 'python-shell-switch-to-shell
 "s l" 'vig/python-shell-send-line
 "s f" 'vig/python-shell-send-fun-and-move
 "s b" 'python-shell-send-buffer
 "s r" 'my-restart-python-console

 ;; navigation using anaconda
 "g d" 'anaconda-mode-find-definitions
 "g a" 'anaconda-mode-find-assignments
 "g r" 'anaconda-mode-find-references-other-window
 ;; "g l" 'helm-imenu
 "g l" 'counsel-imenu
 
 ;; Flycheck error navigation
 "e n" 'flycheck-next-error 
 "e p" 'flycheck-previous-error
 )
 


;; visual mode bindings
(general-define-key
 :states '(visual)
 :keymaps 'python-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 "s r" 'python-shell-send-region)
#+END_SRC
*** EVIL matlab
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert visual)
 :keymaps 'matlab-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"

 ;; Running 
 "p" 'matlab-shell
 ","  'vig/matlab-shell-send-line
 "r r" 'matlab-shell-run-region
 "r c" 'matlab-shell-run-cell

 ;; Commenting
 "i f" 'matlab-indent-function-body
 "i l" 'matlab-indent-line
 )
#+END_SRC
*** EVIL org 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'org-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 "e e" 'org-export-dispatch
 "n n" 'org-narrow-to-subtree
 "n w" 'widen

 ;; Citations
 "c" 'org-ref-helm-insert-cite-link
 "r" 'org-ref-helm-insert-ref-link)
 #+END_SRC
*** EVIL latex 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"

 ;; Building
 "," 'LaTeX-command-section
 "v" 'TeX-view
 "." 'LaTeX-mark-environment

 ;; previews
 "p e" 'preview-environment
 "p b" 'preview-buffer
 "p d" 'preview-document
 "p p" 'preview-at-point

 ;; preview / clear
 "p c r" 'preview-clearout
 "p c s" 'preview-clearout-section
 "p c p" 'preview-clearout-at-point

 ;; inserts
 "s" 'LaTeX-section
 "e" 'LaTeX-environment
 "c" 'LaTeX-close-environment

 ;; citation
 "r c" 'reftex-citation
 "r r" 'reftex-reference
 "r =" 'reftex-toc
 "r p" 'reftex-citep

 ;; fill
 "f s" 'LaTeX-fill-section
 "f p" 'LaTeX-fill-paragraph
 "f b" 'LaTeX-fill-buffer
 "f e" 'LaTeX-fill-environment
 )

(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 "<S-return>" 'LaTeX-insert-item)



#+END_SRC
*** EVIL commenting 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal insert emacs visual)
 :prefix "\\"
 :non-normal-prefix "M-S-\\"
 "l l" 'evilnc-quick-comment-or-uncomment-to-the-line
 "c c" 'evilnc-comment-or-uncomment-lines
 "c p" 'evilnc-comment-or-uncomment-paragraphs
 "c r" 'comment-or-uncomment-region
 "c v" 'evilnc-toggle-invert-comment-line-by-line
  "."  'evilnc-copy-and-comment-operator)
#+END_SRC
*** EVIL multilple cursors
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal)
 :prefix "SPC"
 :non-normal-prefix "M-S-m"
 "m w" 'mc/mark-next-word-like-this
 "m l" 'mc/mark-next-lines
 "m d" 'mc/mark-all-dwim
 "m c"  'mc/add-cursor-on-click)


(general-define-key
 :keymaps '(visual emacs insert)
 "M-d" 'mc/mark-next-word-like-this)
#+END_SRC
When in visual model (especially after selecting a word using =expand
region=, we could mark the next occurance of the word by pressing
=M-d=. 
*** EVIL Navigation
Setting up keybindings for the efficient navigation using =avy=
navigation functions. =avy-goto-char= lets you to navigate to any
arbitrary word in a buffer by just typing a few keystrokes - very fast
indeed in practise. 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal)
 :prefix "SPC"
 :non-normal-prefix "M-S-SPC"
 "g g" 'avy-goto-char
 "g w" 'avy-goto-word-0
 "g b" 'avy-goto-char-2-above
 "g m" 'bookmark-jump
 "t s" 'sr-speedbar-toggle)

 
 ;; ;; neotree
 ;; "t t" 'neotree-toggle
 ;; "t c" 'neotree-dir)
 

 ;; speedbar

(general-define-key
 :keymaps '(normal)
 "Q" 'delete-window)
#+END_SRC
*** EVIL Projectile
Projectile keybindings for evil
#+BEGIN_SRC emacs-lisp


#+END_SRC
