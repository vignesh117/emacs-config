#+TITLE: Emacs configuration file
#+AUTHOR: Vignesh Ganapathiraman
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes
* Configuration
** Meta

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
    ;; This file replaces itself with the actual configuration at first run.

    ;; We can't tangle without org!
    (require 'org)
    ;; Open the configuration
    (find-file (concat user-emacs-directory "init.org"))
    ;; tangle it
    (org-babel-tangle)
    ;; load it
    (load-file (concat user-emacs-directory "init.el"))
    ;; finally byte-compile it
    (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
    git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
    git update-index --no-assume-unchanged init.el
   #+END_SRC

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
    ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
      (defun tangle-init ()
        "If the current buffer is 'init.org' the code-blocks are
      tangled, and the tangled file is compiled."
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "init.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
            (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el"))
            (if (file-exists-p "init.elc") (delete-file "init.elc")) 
   ))
        )

      (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC
** Package config
   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp
     ;; (require 'cl)
     (require 'package)
     (package-initialize)
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

    (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
   #+END_SRC
** Default packages
   These are some default packages that emacs needs to have by
   default. Other packages will be deferred subject to requirement.

   #+BEGIN_SRC emacs-lisp
     (let* ((package--builtins nil)
            (packages
             '(ag			; powerful silver searcher plugib
               auto-compile		; automatically compile Emacs Lisp libraries
               company			; Modular text completion framework
               deadgrep			; Powerful grep 
               define-word		; display the definition of word at point
               doom-themes		;Another amazing theme
               evil                     ; Vim like edting
               modus-operandi-theme	;Theme by prot
               modus-vivendi-theme	;Another theme by prot
               dracula-theme		; Theme
               diminish			; Diminished modes from modeline
               expand-region		; Increase selected region by semantic units
               golden-ratio		; Automatic resizing windows to golden ratio
               gruvbox-theme		;Another inspirational theme 
               hydra			; Another nice aboabo package for persisten keys
               magit			; control Git from Emacs
               markdown-mode		; Emacs Major mode for Markdown-formatted files
               multiple-cursors		; Multiple cursors for Emacs
               org			; Outline-based notes management and organizer
               powerline		; Powerline for emacs
               rg			; An even faster search optinon compared to ag 
               try			; Try out Emacs packages
               use-package		; Great package manager with nifty features
               which-key
               undo-fu                  ; A lightweight alternative to undo-tree
               )))         ; Display available keybindings in popup
       (ignore-errors ;; This package is only relevant for Mac OS X.
         (when (memq window-system '(mac ns))
           (push 'exec-path-from-shell packages)
           (push 'reveal-in-osx-finder packages))
         (let ((packages (remove-if 'package-installed-p packages)))
           (when packages
             ;; Install uninstalled packages
             (package-refresh-contents)
             (mapc 'package-install packages)))))
   #+END_SRC

   #+RESULTS:

** Mac OS based config
   Switches meta to command from option
   #+BEGIN_SRC emacs-lisp
    (setq exec-path-from-shell-check-startup-files nil)
     (when (memq window-system '(mac ns))
       (setq ns-pop-up-frames nil
             mac-option-modifier 'super
             mac-command-modifier 'meta
             select-enable-clipboard t)
       (exec-path-from-shell-initialize)
       (when (fboundp 'mac-auto-operator-composition-mode)
         (mac-auto-operator-composition-mode 1)))'
   #+END_SRC
** Default configs
   I've used the better-defaults package to get some basic
   configuration working. Some additional configurations are added
   here

   #+BEGIN_SRC emacs-lisp
   (setq-default fill-column 80                    ; Maximum line width
                 truncate-lines t                  ; Don't fold lines
                 split-width-threshold 160         ; Split verticly by default
                 evil-want-keybinding nil
                 split-height-threshold nil        ; Split verticly by default
                 auto-fill-function 'do-auto-fill  ; Auto-fill-mode everywhere
                 )	; Relative line numbering by default

   #+END_SRC
   
   Don't ask "yes/No" questions, instead ask "y/n" questions
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
   
   Start emacs-server
   #+BEGIN_SRC emacs-lisp
   ;; (server-start)
   #+END_SRC
*** Eye candy
    I play around with different font options and color themes. Currently
    I've settled down with the nice ~modus operandi~ theme by Protesilaos
    Stavrou and the overpass fonts from [[https://overpassfont.org/][here]].

    #+BEGIN_SRC emacs-lisp
          ;; (load-theme 'modus-vivendi t)
          (load-theme 'modus-operandi t)
          ;; (set-frame-font "Overpass 13" nil t)
          ;; (load-file "~/.emacs.d/clean.el")
          ;; (
          ;; (set-frame-font "Inconsolata 18" nil t)
          (setq default-frame-alist '((font . "Cousine-16")))
           ;; (set-face-attribute 'default nil
           ;;            :family "Inconsolata 14"
           ;;            :height 110
           ;;            :weight 'normal
           ;;            :width 'normal)

          (use-package doom-modeline
                :ensure t
                :hook (after-init . doom-modeline-mode)
                :config
                (setq doom-modeline-env-python-executable "python")

                ;; Whether display perspective name or not. Non-nil to display in mode-line.
                (setq doom-modeline-persp-name t)

                ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
                (setq doom-modeline-lsp nil)

                ;; Whether display github notifications or not. Requires `ghub` package.
                (setq doom-modeline-github nil)
                ;; Whether display minor modes in mode-line or not.
                (setq doom-modeline-minor-modes nil)

                ;; If non-nil, a word count will be added to the selection-info modeline segment.
                (setq doom-modeline-enable-word-count nil)

                ;; If non-nil, only display one number for checker information if applicable.
                (setq doom-modeline-checker-simple-format t)
                ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
                (setq doom-modeline-major-mode-icon t)

                ;; Whether display color icons for `major-mode'. It respects
                ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
                (setq doom-modeline-major-mode-color-icon t)

                ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
                (setq doom-modeline-buffer-state-icon t)

                ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
                ;; and `doom-modeline-buffer-state-icon'.
                (setq doom-modeline-buffer-modification-icon t)
      ) 

    #+END_SRC
    
    Other UI refinements
    #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (toggle-scroll-bar -1) 
    (setq inhibit-startup-message t) 

    #+END_SRC
  
    Powerline for emacs 
    #+BEGIN_SRC emacs-lisp
(powerline-vim-theme) 
    #+END_SRC 

   

    Diminish some modes form modeline
    
    #+BEGIN_SRC emacs-lisp
    (defmacro safe-diminish (file mode &optional new-name)
      `(with-eval-after-load ,file
         (diminish ,mode ,new-name)))

    (diminish 'auto-fill-function)
    (safe-diminish "eldoc" 'eldoc-mode)
    (safe-diminish "company" 'company-mode)
    (safe-diminish "undo-tree" 'undo-tree-mode)
    (safe-diminish "flyspell" 'flyspell-mode)
    ;; (safe-diminish "helm-mode" 'helm-mode)
    (safe-diminish "paredit" 'paredit-mode "()") 
    #+END_SRC
*** Default package config (mostly setting global modes)
    Enable several packages by default. These are typically used
    throughout the config on all the major modes.
    #+BEGIN_SRC emacs-lisp
      (dolist (mode
               '(
                 ; abbrev-mode                  ; E.g. sopl -> System.out.println
                 ;column-number-mode           ; Show column number in mode line
                 evil-mode                   ;vim like editing
                 delete-selection-mode        ; Replace selected text
                 dirtrack-mode                ; directory tracking in *shell*
                 global-company-mode          ; Auto-completion everywhere
                 ;; global-undo-tree-mode		; Global undo tree mode
                 global-display-line-numbers-mode
                 show-paren-mode              ; Highlight matching parentheses
                 which-key-mode))             ; Available keybindings in popup
        (funcall mode 1)
        (flymake-mode -1)
        (line-number-mode -1)
        (tooltip-mode -1))
                 #+END_SRC
    
    Basic company mode config
    #+BEGIN_SRC emacs-lisp
      (setq company-minimum-prefix-length 3
            company-selection-wrap-around t)  ;wrapping around list of selections when scrolling
      (setq company-selection-wrap-around t)
      (setq company-dabbrev-downcase 0)
      (setq company-idle-delay 0.3)

      ;;  (global-set-key "\t" 'company-complete-common)
      ;; ;; got this from https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/
      ;; ;; (setq company-transformers '(company-sort-by-occurrence))


    #+END_SRC
    
    Disabling suggestions automatically by company mode 
    #+BEGIN_SRC emacs-lisp
    ;;; Prevent suggestions from being triggered automatically. In particular,
     ;;; this makes it so that:
     ;;; - TAB will always complete the current selection.
     ;;; - RET will only complete the current selection if the user has explicitly
     ;;;   interacted with Company.
     ;;; - SPC will never complete the current selection.
     ;;;
     ;;; Based on:
     ;;; - https://github.com/company-mode/company-mode/issues/530#issuecomment-226566961
     ;;; - https://emacs.stackexchange.com/a/13290/12534
     ;;; - http://stackoverflow.com/a/22863701/3538165
     ;;;
     ;;; See also:
     ;;; - https://emacs.stackexchange.com/a/24800/12534
     ;;; - https://emacs.stackexchange.com/q/27459/12534

     ;; <return> is for windowed Emacs; RET is for terminal Emacs
     ;; (dolist (key '("<return>" "RET"))
     ;;   ;; Here we are using an advanced feature of define-key that lets
     ;;   ;; us pass an "extended menu item" instead of an interactive
     ;;   ;; function. Doing this allows RET to regain its usual
     ;;   ;; functionality when the user has not explicitly interacted with
     ;;   ;; Company.
     ;;   (define-key company-active-map (kbd key)
     ;;     `(menu-item nil company-complete
     ;;                 :filter ,(lambda (cmd)
     ;;                            (when (company-explicit-action-p)
     ;;                              cmd)))))
     ;; (define-key company-active-map (kbd "TAB") #'company-complete-selection)
     ;; (define-key company-active-map (kbd "SPC") nil)

     ;; Company appears to override the above keymap based on company-auto-complete-chars.
     ;; Turning it off ensures we have full control.
     (setq company-auto-complete-chars nil)
    #+END_SRC
** Modes
   Now we write down language specific (python, latex, org, etc.) or
   feature specific (spelling, autocompletion etc.) configuration
*** Better defaults
    Sets up better defaults for emacs
    #+BEGIN_SRC emacs-lisp
      (use-package better-defaults
	:ensure)
    #+END_SRC
*** Spelling
    For spell-checking we will use the wonderful flyspell package. We
    will enable flyspell for all text-mode buffers and comment regions
    for prog-mode buffers. This is the standard practise
    #+BEGIN_SRC emacs-lisp
    ;; (add-hook 'text-mode-hook 'turn-on-flyspell)
    ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+END_SRC

    Addtionally for correcting spelling (or getting suggestions for
    corrections), we will use a nice wrapper called
    =fly-spell-correct= [[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] via helm

    #+BEGIN_SRC emacs-lisp
    (use-package flyspell-correct-ivy
      :ensure t
      :bind ("C-'" . flyspell-correct-wrapper)
      :init
      (setq flyspell-correct-interface #'flyspell-correct-ivy))
    #+END_SRC
*** Window navigation
    Ace-window mode provides comprehensive functions and keybindings
    to move and manipulate windows.
    #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :config
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       (setq ace-ignore-current t)
       :bind ("M-o" . ace-window))
    #+END_SRC
*** Amx
    This is an alternative to the popular smex mode, which is apparently
    no longer under active development. 
    #+BEGIN_SRC emacs-lisp
      ;; (use-package amx
      ;;   :ensure t
      ;;   :bind ("s-x" . amx))
    #+END_SRC
*** ssh deploy
Helps writing code locally and deploying them on remote machine
#+begin_src emacs-lisp
  (use-package ssh-deploy
    :ensure t
    :demand
    :after hydra
    :hook ((after-save . ssh-deploy-after-save)
           (find-file . ssh-deploy-find-file))
    :config
    (ssh-deploy-line-mode) ;; If you want mode-line feature
    (ssh-deploy-add-menu) ;; If you want menu-bar feature:ensure t
    )
#+end_src

*** Evil
    #+begin_src emacs-lisp
      (use-package evil
        :ensure t
        :defer .1 ;; don't block emacs when starting, load evil immediately after startup
        :init
        ;; (setq evil-want-integration nil) ;; required by evil-collection
        ;; (setq evil-want-keybinding nil)  ;; required by evil-collection
        (setq evil-search-module 'evil-search)
        ;; (setq evil-ex-complete-emacs-commands nil)
        ;; (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
        ;; (setq evil-split-window-below t) ;; like vim's 'splitbelow'
        ;; (setq evil-shift-round nil)
        ;; (setq evil-want-C-u-scroll t))
        )

        ;; vim-like keybindings everywhere in emacs
        ;; (use-package evil-collection
        ;;   :after evil
        ;;   :ensure t
        ;;   :init
        ;;   (setq evil-want-keybinding nil)
        ;;   :config
        ;;   (evil-collection-init))

        ;; gl and gL operators, like vim-lion
        (use-package evil-lion
          :ensure t
          :bind (:map evil-normal-state-map
                      ("g l " . evil-lion-left)
                      ("g L " . evil-lion-right)
                      :map evil-visual-state-map
                      ("g l " . evil-lion-left)
                      ("g L " . evil-lion-right)))

        ;; gc operator, like vim-commentary
        (use-package evil-commentary
          :ensure t
          :bind (:map evil-normal-state-map
                      ("gc" . evil-commentary)))


        ;; NOTE using cx like vim-exchange is possible but not as straightforward
        ;; (use-package evil-exchange
        ;;   :ensure t
        ;;   :bind (:map evil-normal-state-map
        ;;               ("gx" . evil-exchange)
        ;;               ("gX" . evil-exchange-cancel)))

        ;; gr operator, like vim's ReplaceWithRegister
        (use-package evil-replace-with-register
          :ensure t
          :bind (:map evil-normal-state-map
                      ("gr" . evil-replace-with-register)
                      :map evil-visual-state-map
                      ("gr" . evil-replace-with-register)))

        ;; * operator in vusual mode
        ;; (use-package evil-visualstar
        ;;   :ensure t
        ;;   :bind (:map evil-visual-state-map
        ;;               ("*" . evil-visualstar/begin-search-forward)
        ;;               ("#" . evil-visualstar/begin-search-backward)))

        ;; ex commands, which a vim user is likely to be familiar with
        ;; (use-package evil-expat
        ;;   :ensure t
        ;;   :defer t)

        ;; visual hints while editing
        ;; (use-package evil-goggles
        ;;   :ensure t
        ;;   :config
        ;;   (evil-goggles-use-diff-faces)
        ;;   (evil-goggles-mode))

        ;; like vim-surround
        ;; (use-package evil-surround
        ;;   :ensure t
        ;;   :commands
        ;;   (evil-surround-edit
        ;;    evil-Surround-edit
        ;;    evil-surround-region
        ;;    evil-Surround-region)
        ;;   :init
        ;;   (evil-define-key 'operator global-map "s" 'evil-surround-edit)
        ;;   (evil-define-key 'operator global-map "S" 'evil-Surround-edit)
        ;;   (evil-define-key 'visual global-map "S" 'evil-surround-region)
        ;;   (evil-define-key 'visual global-map "gS" 'evil-surround-region))

         ;; This is a cool package that lets us jump to matched paranthesis
         ;; with a =%=. 
         ;; (use-package evil-matchit
         ;;   :requires evil
         ;;   :ensure t)

    #+end_src
*** Async
    Essential package for supporting asynchronous operations in
    emacs. This is especially useful when carrying out cpu intensive
    operations such as copy.
    #+BEGIN_SRC emacs-lisp
      (use-package async
        :ensure t
        :config
        (dired-async-mode 1)
        (async-bytecomp-package-mode 1))
    #+END_SRC
*** Selectrum
    #+BEGIN_SRC emacs-lisp
      (use-package selectrum
        :ensure
        :config

        (use-package prescient
          :ensure t
          :config
          (prescient-persist-mode +1)
          (setq prescient-filter-method '(fuzzy literal regexp initialism))
          )
        (use-package selectrum-prescient
          :ensure
          :after selectrum)
        (selectrum-mode 1)
        (selectrum-prescient-mode 1))
    #+END_SRC
*** Company prescient
    #+begin_src emacs-lisp
      (use-package company-prescient
        :ensure t
        :after (company))
    #+end_src

*** Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet                  ; Snippets
        :ensure t
        :config

        ;; Function for getting yasnippet to generate google style docstrings
        (defun python-args-to-google-docstring (text &optional make-fields)
        "Return a reST docstring format for the python arguments in yas-text."
        (let* ((indent (concat "\n" (make-string (current-column) 32)))
               (args (python-split-args text))
           (nr 0)
               (formatted-args
            (mapconcat
             (lambda (x)
               (concat "   " (nth 0 x)
                   (if make-fields (format " ${%d:arg%d}" (cl-incf nr) nr))
                   (if (nth 1 x) (concat " \(default " (nth 1 x) "\)"))))
             args
             indent)))
          (unless (string= formatted-args "")
            (concat
             (mapconcat 'identity
                (list "" "Args:" formatted-args)
                indent)
             "\n"))))
        (setq
         yas-verbosity 1                      ; No need to be so verbose
         yas-wrap-around-region t)

        ;; (with-eval-after-load 'yasnippet
        ;;   (setq yas-snippet-dirs '(yasnippet-snippets-dir)))

        (yas-reload-all)
        (yas-global-mode))

      (use-package yasnippet-snippets         ; Collection of snippets
        :ensure t)
    #+END_SRC
*** Ivy
    #+BEGIN_SRC emacs-lisp
      ;; (use-package ivy :ensure t
      ;;   :diminish (ivy-mode . "")
      ;;   :bind
      ;;   (:map ivy-mode-map
      ;;    ("C-'" . ivy-avy)
      ;;    ("s-b" . ivy-switch-buffer-other-window)
      ;;    ("s-f" . find-file-other-window))
      ;;   :config
      ;;   (use-package ivy-prescient
      ;;     :ensure t
      ;;     :after ivy)
      ;;   ;; (ivy-mode 1)
      ;;   (ivy-prescient-mode 1)
      ;;   ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
      ;;   (setq ivy-use-virtual-buffers t)
      ;;   ;; number of result lines to display
      ;;   (setq ivy-height 10)
      ;;   ;; does not count candidates
      ;;   (setq ivy-count-format "")
      ;;   ;; no regexp by default
      ;;   (setq ivy-initial-inputs-alist nil)
      ;;   ;; configure regexp engine.
      ;;   (setq ivy-re-builders-alist
      ;;         ;; allow input not in order
      ;;         '((t   . ivy--regex-ignore-order))))
    #+END_SRC
*** Counsel
    1. Basic counsel definition
       #+BEGIN_SRC emacs-lisp
         (use-package counsel :ensure t)

       #+END_SRC

    2. Counsel etags This is a drop-in replacement for
       ~xref-find-definition~. I'm going to rebind ~M-.~ to
       ~counsel-etags-find-tag~. The cool thing about this package is, if
       the TAGS file is not found in the directory, the package will
       create it for you. 
       #+BEGIN_SRC emacs-lisp
         (use-package counsel-etags
           :ensure t
           :bind
           ("C-." . 'counsel-etags-find-tag-at-point)
           ("s-i" . 'counsel-outline)
           ("s-." . 'counsel-git-grep)
           )
       #+END_SRC
*** Consult
    Completion framework similar to counsel, but with more features
    #+begin_src emacs-lisp :tangle yes
      (use-package consult
        :ensure t
        :config
        (recentf-mode t))
    #+end_src
*** Embark 
    #+begin_src emacs-lisp :tangle yes
      (use-package marginalia
        :ensure t
        :config
        (marginalia-mode))

      (use-package embark
        :ensure t
        :bind
        ("M-S-<return>" . embark-act))              ; pick some comfortable binding

      ;; Consult users will also want the embark-consult package.
      (use-package embark-consult
        :ensure t
        :after (embark consult)
        :demand t ; only necessary if you have the hook below
        ;; if you want to have consult previews as you move around an
        ;; auto-updating embark collect buffer
        :hook
        (embark-collect-mode . embark-consult-preview-minor-mode))
    #+end_src
    
*** Ctrlf
    This is a new search application. I'm going to try this in place of isearch
    #+BEGIN_SRC emacs-lisp
      ;; (use-package ctrlf
      ;;   :ensure
      ;;   :init
      ;;   (ctrlf-mode +1)
      ;;   )
    #+END_SRC

*** Dumb jump
    Package to jump around code efficiently. Officially claims to
    support more that 40 languages including python and matlab.

    #+BEGIN_SRC emacs-lisp
      ;; (use-package dumb-jump
      ;;   :bind (("M-g o" . dumb-jump-go-other-window)
      ;;          ("M-g j" . dumb-jump-go)
      ;;          ("M-g b" . dumb-jump-back)
      ;;          ("M-g i" . dumb-jump-go-prompt)
      ;;          ("M-g x" . dumb-jump-go-prefer-external)
      ;;          ("M-g z" . dumb-jump-go-prefer-external-other-window)
      ;;          ("M-g M-l" . dumb-jump-quick-look)
      ;;          )
      ;;   :config
      ;;   (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
      ;;   (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
      ;;   (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t)
      ;;   (dumb-jump-mode)
      ;;   :ensure t)
    #+END_SRC

*** tree-sitter mode
    Better syntax highlighting for programming modes.
    #+begin_src emacs-lisp :tangle yes
      ;; (use-package tree-sitter
      ;;   :ensure t
      ;;   :init
      ;;   (global-tree-sitter-mode)
      ;;   :config
      ;;   (use-package tree-sitter-langs :ensure t)
      ;;   (add-hook 'rust-mode-hook #'tree-sitter-mode)
      ;;   (add-hook 'python-mode-hook #'tree-sitter-mode)
      ;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
      ;; )
    #+end_src

*** Frog jump
    Most efficient way to jump buffer with just a couple of key-strokes
    #+begin_src emacs-lisp
  (use-package frog-jump-buffer
    :ensure
    :bind
    (("<f9>" . 'frog-jump-buffer)))
    #+end_src

*** Iedit mode
    #+BEGIN_SRC emacs-lisp
      (use-package iedit
        :ensure
        :defer 
        :bind ("C-:" . 'iedit-mode))
    #+END_SRC

*** Dired 
    Some configuration regarding dired and some of it utility packages
    #+BEGIN_SRC emacs-lisp
      (use-package dired
        :config 
        (setq dired-recursive-copies 'always)
        (setq dired-recursive-deletes 'always)
        (setq delete-by-moving-to-trash t)
        (setq dired-listing-switches
              "-AGFhlv --group-directories-first --time-style=long-iso")
        (setq dired-dwim-target t)
        ;; Note that the the syntax for `use-package' hooks is controlled by
        ;; the `use-package-hook-name-suffix' variable.  The "-hook" suffix is
        ;; not an error of mine.
        :hook ((dired-mode-hook . dired-hide-details-mode)
               (dired-mode-hook . hl-line-mode)))
    #+END_SRC

*** Dired narrow
    Dynamically narrow Dired buffer
    #+BEGIN_SRC emacs-lisp
      (use-package dired-narrow
        :ensure 
        :bind (:map dired-mode-map
                    ("/" . dired-narrow)))
    #+END_SRC
*** Dired subtree
    Use tab and s-tab to open and close directories
    #+BEGIN_SRC emacs-lisp
      (use-package dired-subtree
        :ensure
        :after dired
        :config
        (setq dired-subtree-use-backgrounds nil)
        :bind (:map dired-mode-map
                    ("<tab>" . dired-subtree-toggle)
                    ("<C-tab>" . dired-subtree-cycle)
                    ("<S-iso-lefttab>" . dired-subtree-remove)))
    #+END_SRC
*** Diredfl
    More colors on the dired buffer
    #+BEGIN_SRC emacs-lisp
      (use-package diredfl
        :ensure
        :hook (dired-mode-hook . diredfl-mode))
    #+END_SRC
*** Dired peep
    Preview files inside dired
    #+BEGIN_SRC emacs-lisp
     (use-package peep-dired
       :ensure
       :after dired
       :config
       (setq peep-dired-cleanup-on-disable t)
       (setq peep-dired-enable-on-directories nil)
       (setq peep-dired-ignored-extensions
             '("mkv" "webm" "mp4" "mp3" "ogg" "iso"))
       :bind (:map dired-mode-map
                   ("P" . peep-dired)))
    #+END_SRC
*** Tramp 
This has some refinements for tramp mode
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :config
    (setq tramp-inline-compress-start-size 1000000)
    ;;(setq vc-handled-backends (quote (RCS CVS SVN SCCS Bzr Hg Mtn Arch)))
    (setq vc-handled-backends '(SVN Git))
    (setq remote-file-name-inhibit-cache nil)
    (setq vc-ignore-dir-regexp
          (format "%s\\|%s"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp))
    (setq tramp-verbose 1)
    )
#+END_SRC
*** Deft mode
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind ("<f8>" . 'deft)
    :config
    (setq deft-directory "~/deft"
          deft-extensions '("org")
          deft-default-extension "org"
          deft-recursive t
          deft-use-filter-string-for-filename t)
    (auto-fill-mode 1)
    )
#+END_SRC
*** LSP mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-ui-doc-enable nil
        lsp-ui-peek-enable t
        lsp-ui-sideline-enable t
        lsp-ui-imenu-enable t
        lsp-ui-flycheck-enable t))

  (use-package company-lsp
    :ensure t
    :commands company-lsp)
#+end_src
*** Yaml mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    :bind (:map yaml-mode-map
                ("C-m" .  'newline-and-indent))
    )
#+end_src

*** Flycheck
Flycheck mode is apparently faster and more efficient than flymake
mode that comes by default with emacs
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure
    :custom
    (flycheck-emacs-lisp-initialize-packages t)
    (flycheck-display-errors-delay 0.1)
    :config
    (global-flycheck-mode 1)
    (setq flycheck-global-modes '(not LaTeX-mode latex-mode python-mode))
    (flymake-mode -1))
#+END_SRC
*** Docker
    1. Docker-mode to highlight docker files
       #+begin_src emacs-lisp
         (use-package dockerfile-mode
           :ensure
           :config
           (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
       #+end_src
    2. Docker-tramp mode to enable us to edit inside docker containers
       #+begin_src emacs-lisp :tangle yes
         (use-package docker-tramp
           :ensure t)
       #+end_src

*** Python mode
    We will use anaconda mode for python.
    #+BEGIN_SRC emacs-lisp
            ;; (use-package pyvenv
            ;;   :ensure t
            ;;   :config
            ;;   :after (python)
            ;;   (setenv "WORKON_HOME" "/Users/Z0041V0/.pyenv/shims/")
            ;;   (pyvenv-workon "v-search-pytorch"))		;Can be changed later
            (use-package pyenv-mode
              :ensure t
              :defer t
              :init
              (add-to-list 'exec-path "~/.pyenv/shims")
              (setenv "WORKON_HOME" "~/.pyenv/versions/")
              (pyenv-mode-set "v-search-pytorch"))


            (use-package elpy
              :ensure t
              :defer t
              :config
              (setq elpy-rpc-virtualenv-path 'current)


              ;; Some recommended configuration options by elpy

              ; Use flycheck instead of flymake
              ;; Global modes are configured with main flycheck config itself.
              ;; (when (load "flycheck" t t)
              ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
              ;;   (add-hook 'elpy-mode-hook 'flycheck-mode))

              ;; Use this improved function for function navigation
              ;; ;; 
              ;; This function additionally searches for the symbol (or function) using rgrep
              ;; if the function definition using tag information is not found. 

              (defun elpy-goto-definition-or-rgrep ()
                "Go to the definition of the symbol at point, if found. Otherwise, run `elpy-rgrep-symbol'."
                (interactive)
                (ring-insert find-tag-marker-ring (point-marker))
                (condition-case nil (elpy-goto-definition)
                  (error (elpy-rgrep-symbol
                          (concat "\\(def\\|class\\)\s" (thing-at-point 'symbol) "(")))))

              :bind (:map python-mode-map
                          ("M-." . 'elpy-goto-definition-or-rgrep)
                          )
              )


    #+END_SRC
    
    Highlight indent guide mode for highlighting indentation. This is
    especially useful if we are having long blocks of python code.

    #+BEGIN_SRC emacs-lisp
    (use-package highlight-indent-guides
      :ensure t
      :defer)

    #+END_SRC
    Linting support using the awesome black linter
    #+BEGIN_SRC emacs-lisp
      (use-package python-black
        :ensure
        :bind (:map python-mode-map
                    ("C-M-\\" . 'python-black-statement)))
    #+END_SRC

    
    Format python docstrings and provide features such as autofill.
    #+begin_src emacs-lisp
      (use-package python-docstring
        :ensure t
        )
    #+end_src
    
    Some imenu tweaks for python
    #+begin_src emacs-lisp
      (defun my-merge-imenu ()
        (interactive)
        (let ((mode-imenu (imenu-default-create-index-function))
              (custom-imenu (imenu--generic-function imenu-generic-expression)))
          (append mode-imenu custom-imenu))) 
      (add-to-list
       'imenu-generic-expression
       '("Sections" "^#### \\[ \\(.*\\) \\]$" 1))
      (setq imenu-create-index-function 'my-merge-imenu)

      (defun python-imenu-use-flat-index
          ()
        (setq imenu-create-index-function
              #'python-imenu-create-flat-index))

      (add-hook 'python-mode-hook
                #'python-imenu-use-flat-index)
    #+end_src
    

    Putting all the configurations together
    #+begin_src emacs-lisp
      (defun vig/python-configs ()
      (auto-fill-mode)
      (python-docstring-mode)
      (auto-fill-mode t)
      (python-docstring-mode)
      (elpy-enable)
      (pyenv-mode)
      (hs-minor-mode)
      (setq comment-auto-fill-only-comments t
              python-indent-offset 4
              python-shell-interpreter "python3")
      )
    #+end_src


    #+BEGIN_SRC emacs-lisp

      (use-package python-mode
        :ensure t
        :config
        (add-hook 'python-mode-hook 'vig/python-configs)

        (defun vig/format-python-text ()
          "untabify and wrap python comments"
          (interactive)
          (untabify (point-min) (point-max))
          (goto-char (point-min))
          (while (re-search-forward comment-start nil t)
            (call-interactively 'fill-paragraph)
            (forward-line 1)))
        :bind
        (:map python-mode-map
              ("C-c n f" . 'narrow-to-defun)
              ("C-c n w" . 'widen)
              ("<f10>" . 'elpy-black-fix-code)
              ("C-M-\\" . 'python-black-statement)
              ("<RET>" . 'newline-and-indent)
              ("<f4>" . 'vig/format-python-text
               ))
        )
    #+END_SRC
    #+begin_src emacs-lisp :tangle yes
    
    #+end_src

    # Auto docstring generation for python
    # #+begin_src emacs-lisp
    #  (use-package buftra
    #    :ensure nil
    #    :load-path "~/.emacs.d/local/buftra.el/"
    #    )

    #  (use-package py-pyment
    #    :ensure nil
    #    :load-path "~/.emacs.d/local/py-cmd-buffer.el"
    #    :config
    #    (setq py-pyment-options '("--output=numpydoc")))
    # #+end_src
   
*** Ipython notebook mode
This is a frontend to jupyter notebooks with emacs keybindings and
other features.

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t
    :defer
    :diminish "ein")
#+END_SRC
*** Org mode
    1. *Babel*: Org babel lets you to write and execute a lot of
       languages within org mode
       #+BEGIN_SRC emacs-lisp
         ;; active Babel languages
         (use-package org
           :defer t
           :config
           (org-babel-do-load-languages
            'org-babel-load-languages
            '((R . t)
              (emacs-lisp . t)
              (latex . t)
              (python . t))
            )
           (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)
                                      (turn-on-auto-fill)))

           ;; When editing org-files with source-blocks, we want the source
           ;; blocks to be themed as they would in their native mode.

           (setq org-src-fontify-natively t
                 ;; org-src-tab-acts-natively t
                 org-confirm-babel-evaluate nil
                 org-adapt-indentation t
                 org-hide-leading-stars nil
                 )
           )
       #+END_SRC
    2. Some default configs while editing files in org mode
       #+BEGIN_SRC emacs-lisp
       ;; (add-hook 'org-mode-hook 'auto-fill-mode)
       (use-package org
         :config
         (org-indent-mode +1)
         (auto-fill-mode +1))
       #+END_SRC
    4. Reference management using org-ref 
       #+BEGIN_SRC emacs-lisp
       (use-package org-ref
         :ensure t
         :defer t
         :after org
         :config
         (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references_zotero.bib")
         )
       #+END_SRC
    5. Org pandoc : conversion between several formats via org-export
       #+BEGIN_SRC emacs-lisp 
       (use-package ox-pandoc
         :ensure t
         :defer t)
       #+END_SRC
    6. Ox reveal for amazing presentations 
       #+BEGIN_SRC emacs-lisp
       (use-package ox-reveal
         :ensure 
         :demand
         ox-reveal)

       ;; (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
       (setq org-reveal-root "file:////Users/z0041v0/Downloads/reveal.js")
       (setq org-reveal-mathjax t)

       (use-package htmlize
         :ensure t
         :demand)
       #+END_SRC

       #+RESULTS:
    7. Org agenda 
       #+BEGIN_SRC emacs-lisp
        (setq org-agenda-files
              '("~/Documents/org/"))

       #+END_SRC

**** Org mode and latex 
     1. Make org latex export use latexmk while exporting documents to pdf 
        #+BEGIN_SRC emacs-lisp
        (setq org-latex-pdf-process
              '("pdflatex -interaction nonstopmode -output-directory %o %f"
                "bibtex %b"
                "pdflatex -interaction nonstopmode -output-directory %o %f"
                "pdflatex -interaction nonstopmode -output-directory %o %f"))
        #+END_SRC
        
*** Org roam
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Documents/roam")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))
#+end_src
*** Evil org
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :defer t
    :config
    (add-hook 'org-mode-hook 'evil-org-mode))

#+end_src

*** latex
We will use the wonderful auctex mode
#+BEGIN_SRC emacs-lisp
  ;; (setq reftex-default-bibliography "/Users/vigneshganapathiraman/bibliography/references_zotero.bib")
  (use-package reftex
    :ensure t
    :after auctex
    :config
    (setq reftex-enable-partial-scans t)
    (setq reftex-save-parse-info t)
    (setq reftex-use-multiple-selection-buffers t)
    (setq reftex-plug-into-AUCTeX t)
    (setq reftex-label-alist '(AMSTeX))   ;enable eqref inside reftex
    ) 

  (use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :defer t
    :config
    (setq-default bibtex-dialect 'biblatex)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (turn-on-reftex)
                (turn-on-auto-fill)
                (latex-math-mode)
                (TeX-PDF-mode t)
                (TeX-source-correlate-mode t)
                (setq TeX-source-correlate-method 'synctex)
                (setq 
                 TeX-source-correlate-start-server t
                 )
                (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
                (setq auctex-latexmk-inherit-TeX-PDF-mode t)
                (setq TeX-view-program-list
                      '(("pdf-tools" "TeX-pdf-tools-sync-view")))
                (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

                ;; Fix indentation
                (setq LaTeX-indent-level 3)
                (setq LaTeX-item-indent 3)
                (setq TeX-brace-indent-level 3)
                (add-to-list 'company-backends 'company-math-symbols-unicode)
                ))
    )
  (use-package auctex-latexmk
    :ensure t
    :defer
    :config
    (auctex-latexmk-setup)
    )

  (use-package company-math
    :ensure t
    :after auctex)
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t)
  (setq auto-mode-alist 
        (cons '("\\.md" . markdown-mode) auto-mode-alist))
#+END_SRC
*** Julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :ensure t
    :defer t)
#+END_SRC

*** Go lang
Emacs setup for golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
  :ensure
  :config
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  (add-hook 'go-mode-hook 'lsp-deferred)

  :bind
  (:map go-mode-map
          ("<f10>" . 'lsp-format-buffer)
          ("M-q" . 'lsp-format-region)
          ("M-." . 'lsp-describe-thing-at-point)))
#+END_SRC
*** Hive
#+begin_src emacs-lisp
  (use-package hive :ensure
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.hql\\'" . sql-hive)))
#+end_src

*** ESS
ESS (/Emacs speaks statistics/) is a comprehensive package for using statistcs related packagse in
emacs. I mostly use it to interact with R and write R code. However,
recently I'm also using it to program in ~julia~. 
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :defer t
    :mode (
           ("\\.R\\'" . ess-r-mode)
           ("\\.jl\\'" . ess-julia-mode)))
#+END_SRC
*** General
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t)
#+END_SRC
*** Navigation 
#+BEGIN_SRC emacs-lisp
(use-package sentence-navigation
  :ensure t
  :defer t
  :config
  (define-key evil-motion-state-map ")" 'sentence-nav-evil-forward)
  (define-key evil-motion-state-map "(" 'sentence-nav-evil-backward)
  (define-key evil-motion-state-map "g)" 'sentence-nav-evil-forward-end)
  (define-key evil-motion-state-map "g(" 'sentence-nav-evil-backward-end)
  (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
  (define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence)) 
#+END_SRC
Hydras for manipulating windows 
#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:color red
                        :columns nil)
  "window"
  ("h" windmove-left nil)
  ("j" windmove-down nil)
  ("k" windmove-up nil)
  ("l" windmove-right nil)
  ("H" hydra-move-splitter-left nil)
  ("J" hydra-move-splitter-down nil)
  ("K" hydra-move-splitter-up nil)
  ("L" hydra-move-splitter-right nil)
  ("v" (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right))
       "vert")
  ("x" (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down))
       "horz")
  ("t" transpose-frame "'" :exit t)
  ("o" delete-other-windows "one" :exit t)
  ("a" ace-window "ace")
  ("s" ace-swap-window "swap")
  ("d" ace-delete-window "del")
  ("i" ace-maximize-window "ace-one" :exit t)
  ("b" ido-switch-buffer "buf")
  ("m" headlong-bookmark-jump "bmk")
  ("q" nil "cancel")
  ("u" (progn (winner-undo) (setq this-command 'winner-undo)) "undo")
  ("f" nil))
#+END_SRC
*** Utils 
#+BEGIN_SRC emacs-lisp
  (defun er-copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))


  (defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring"
    (interactive "p")
    (kill-ring-save (line-beginning-position)
                    (line-beginning-position (+ 1 arg)))
    (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

  (defun quick-cut-line ()
    "Cut the whole line that point is on.  Consecutive calls to this command append each line to the kill-ring."
    (interactive)
    (let ((beg (line-beginning-position 1))
          (end (line-beginning-position 2)))
      (if (eq last-command 'quick-cut-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-new (buffer-substring beg end)))
      (delete-region beg end))
    (beginning-of-line 1)
    (setq this-command 'quick-cut-line))

  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
    )
#+END_SRC
*** Centaur tabs
Nice tabs mode for modern UI switching
# Config lifted from https://github.com/ianpan870102/.use-package.emacs.d/blob/master/init.el
#+BEGIN_SRC emacs-lisp
  ;; (use-package centaur-tabs
  ;;  :ensure t
  ;;  :demand
  ;;  :init (setq centaur-tabs-set-bar 'over)
  ;;  :config
  ;;  (centaur-tabs-mode)
  ;;  (centaur-tabs-headline-match)
  ;;  (setq centaur-tabs-set-modified-marker t
  ;;        centaur-tabs-modified-marker " ● "
  ;;        centaur-tabs-cycle-scope 'tabs
  ;;        centaur-tabs-height 30
  ;;        centaur-tabs-set-icons t
  ;;        centaur-tabs-close-button " × ")
  ;;  (dolist (centaur-face '(centaur-tabs-selected
  ;;                          centaur-tabs-selected-modified
  ;;                          centaur-tabs-unselected
  ;;                          centaur-tabs-unselected-modified))
  ;;    (set-face-attribute centaur-face nil :family "Arial" :height 130))
  ;;  :bind
  ;;  ("C-S-<tab>" . centaur-tabs-backward)
  ;;  ("C-<tab>" . centaur-tabs-forward))
#+END_SRC
*** Multiple cursors
Setup borrowed from Kaushal Modi's setup
#+BEGIN_SRC emacs-lisp
  ;; Time-stamp: <2017-09-20 09:52:55 kmodi>

  ;; Multiple Cursors
  ;; https://github.com/magnars/multiple-cursors.el

  (use-package multiple-cursors
    :bind (
           ("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)
           ("C-S-<down>" . mc/mark-next-lines)
           ("C-S-<up>" . mc/mark-previous-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click))
    :init
    (progn
      ;; Temporary hack to get around bug # 28524 in emacs 26+
      ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28524
      (setq mc/mode-line
            `(" mc:" (:eval (format ,(propertize "%-2d" 'face 'font-lock-warning-face)
                                    (mc/num-cursors)))))

      (setq mc/list-file (locate-user-emacs-file "mc-lists"))

      ;; The `multiple-cursors-mode-enabled-hook' and
      ;; `multiple-cursors-mode-disabled-hook' are run in the
      ;; `multiple-cursors-mode' minor mode definition, but they are not declared
      ;; (not `defvar'd). So do that first before using `add-hook'.
      (defvar multiple-cursors-mode-enabled-hook nil
        "Hook that is run after `multiple-cursors-mode' is enabled.")
      (defvar multiple-cursors-mode-disabled-hook nil
        "Hook that is run after `multiple-cursors-mode' is disabled.")))

  ;; * Mark one more occurrence
  ;;
  ;; | mc/mark-next-like-this            | Adds a cursor and region at the next part of the buffer       |
  ;; |                                   | forwards that matches the current region.                     |
  ;; | mc/mark-next-word-like-this       | Like `mc/mark-next-like-this` but only for whole words.       |
  ;; | mc/mark-next-symbol-like-this     | Like `mc/mark-next-like-this` but only for whole symbols.     |
  ;; | mc/mark-previous-like-this        | Adds a cursor and region at the next part of the buffer       |
  ;; |                                   | backwards that matches the current region.                    |
  ;; | mc/mark-previous-word-like-this   | Like `mc/mark-previous-like-this` but only for whole words.   |
  ;; | mc/mark-previous-symbol-like-this | Like `mc/mark-previous-like-this` but only for whole symbols. |
  ;; | mc/mark-more-like-this-extended   | Use arrow keys to quickly mark/skip next/previous occurances. |
  ;; | mc/add-cursor-on-click            | Bind to a mouse event to add cursors by clicking.             |
  ;; |                                   | See tips-section.                                             |
  ;;
  ;; * Mark many occurrences
  ;;
  ;; | mc/mark-all-like-this                  | Marks all parts of the buffer that matches the current region.        |
  ;; | mc/mark-all-words-like-this            | Like `mc/mark-all-like-this` but only for whole words.                |
  ;; | mc/mark-all-symbols-like-this          | Like `mc/mark-all-like-this` but only for whole symbols.              |
  ;; | mc/mark-all-in-region                  | Prompts for a string to match in the region, adding cursors           |
  ;; |                                        | to all of them.                                                       |
  ;; | mc/mark-all-like-this-in-defun         | Marks all parts of the current defun that matches the current region. |
  ;; | mc/mark-all-words-like-this-in-defun   | Like `mc/mark-all-like-this-in-defun` but only for whole words.       |
  ;; | mc/mark-all-symbols-like-this-in-defun | Like `mc/mark-all-like-this-in-defun` but only for whole symbols.     |
  ;; | mc/mark-all-like-this-dwim             | Tries to be smart about marking everything you want. Can be           |
  ;; |                                        | pressed multiple times.                                               |
  ;;
  ;; * Special
  ;;
  ;; | set-rectangular-region-anchor | Think of this one as `set-mark` except you're marking a rectangular region. |
  ;; | mc/mark-sgml-tag-pair         | Mark the current opening and closing tag.                                   |
  ;; | mc/insert-numbers             | Insert increasing numbers for each cursor, top to bottom.                   |
  ;; | mc/sort-regions               | Sort the marked regions alphabetically.                                     |
  ;; | mc/reverse-regions            | Reverse the order of the marked regions.                                    |
  ;;
  ;; ** Tips and tricks
  ;; - To get out of multiple-cursors-mode, press `<return>` or `C-g`. The latter will
  ;;   first disable multiple regions before disabling multiple cursors. If you want to
  ;;   insert a newline in multiple-cursors-mode, use `C-j`.
  ;; - Sometimes you end up with cursors outside of your view. You can
  ;;   scroll the screen to center on each cursor with `C-v` and `M-v`.
  ;; - Try pressing `mc/mark-next-like-this` with no region selected. It will just add a cursor
  ;;   on the next line.
  ;; - Try pressing `mc/mark-all-like-this-dwim` on a tagname in html-mode.
  ;; - Notice that the number of cursors active can be seen in the modeline.
  ;; - If you get out of multiple-cursors-mode and yank - it will yank only
  ;;   from the kill-ring of main cursor. To yank from the kill-rings of
  ;;   every cursor use yank-rectangle, normally found at C-x r y.
  ;; - You can use `mc/reverse-regions` with nothing selected and just one cursor.
  ;;   It will then flip the sexp at point and the one below it.
  ;; - If you would like to keep the global bindings clean, and get custom keybindings
  ;;   when the region is active, you can try [region-bindings-mode](https://github.com/fgallina/region-bindings-mode).
  ;;
  ;; It is recommended to add `mc/mark-next-like-this` to a key binding that's
  ;; right next to the key for `er/expand-region`.

#+END_SRC
*** PDF tools
    Awesom pdf reader right inside emacs
    #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
	:ensure
	:init
	(pdf-tools-install)
        :config
        (setq auto-revert-interval 0.5) 
)
    #+END_SRC
** Custom functions
- Create an empty buffer
#+BEGIN_SRC emacs-lisp
(defun create-empty-buffer () 
"Open a new empty buffer.
Borrowed from
https://emacs.stackexchange.com/questions/20/re-open-scratch-buffer"
(interactive)
(let ((buf (generate-new-buffer "untitled")))
(switch-to-buffer buf)
(funcall (and initial-major-mode))
(setq buffer-offer-save t)))
#+END_SRC

* Keybindings
** Basic keybindings
These are evil specific keybindings. All definitions use general.el 

1. Essentials
    #+BEGIN_SRC emacs-lisp
      (general-define-key
       "C-e" 'end-of-line
       "C-a" 'beginning-of-visual-line
       "C-k" 'kill-line
       "M-+" 'text-scale-increase
       "M-_" 'text-scale-decrease
       "C-x C-b" 'ibuffer
       "C-M-o" 'hydra-window/body
       "<f6>" 'deadgrep
       "M-O" 'occur
       "C-x r y" 'er-copy-file-name-to-clipboard
       "s-w" 'copy-line
       "s-W" 'quick-cut-line
       "<s-down>" 'duplicate-line
       "M-I" 'consult-imenu
       )
    #+END_SRC

2. Evil mode general keys
   #+begin_src emacs-lisp :tangle yes
     (general-define-key
      :states 'normal
      "u" 'undo-fu-only-undo
      "C-r" 'undo-fu-only-redo)
      #+end_src

     2. Narrow and widen

        #+BEGIN_SRC emacs-lisp
          (general-define-key 
           :prefix "M-n"
           "n" 'narrow-to-region
           "w" 'widen)
           #+END_SRC
3. Program mode bindings
   #+BEGIN_SRC emacs-lisp
     (general-define-key
      "C-;" 'comment-line)
   #+END_SRC
4. Winner mode
   #+BEGIN_SRC emacs-lisp
     (general-define-key
      "<s-right>" 'winner-undo
      "<s-left>" 'winner-redo)
   #+END_SRC

** Expand region
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-S-m") 'er/expand-region)
    (global-set-key (kbd "C-S-n") 'er/contact-region)
   #+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer
    :bind (("M-s-g" . 'magit-status)))
#+END_SRC
** Custom global shortcuts
1. Create new buffer with custom
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x |") 'create-empty-buffer)
   #+END_SRC

2. Spacemacs type bindings
    #+BEGIN_SRC emacs-lisp
      (general-define-key
      :keymaps '(normal insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"

      ;; general
      "SPC" 'execute-extended-command
      ;; Window configuations
      "w m" 'delete-other-windows
      "w d" 'delete-window
      "w o" 'ace-window
      "w h" 'windmove-left
      "w l" 'windmove-right
      "w 2" 'split-window-horizontally
      "w =" 'balance-windows

      ;; Buffer configurations
      "b d" 'kill-this-buffer			;Kills without asking
      "b k" 'kill-buffer-and-window
      "b b" 'consult-buffer
      "[ [" 'previous-buffer
      "] ]" 'next-buffer

      ;; Dired
      "a d" 'dired

      ;; copy related
      "c k" 'helm-show-kill-ring

      ;; Undo-fu
      "u" 'undo-fu-only-undo
      "\C-r" 'undo-fu-only-redo

      ;; File management
      "f f" 'find-file
      "f r" 'consult-recent-file
      "f d" 'dired-jump-other-window
      "f y" 'er-copy-file-name-to-clipboard
      "f l" 'consult-locate
      "f g" 'counsel-git-grep

      ;; Projectile
      ;; "p f f" 'projectile-find-file
      ;; "p f r" 'projectile-recentf
      ;; "p d" 'projectile-find-dir
      ;; "p k" 'projectile-kill-buffers
      ;; "p s" 'projectile-switch-project
      ;; "p o" 'projectile-switch-open-project
      ;; "p r" 'projectile-replace

      ;; Search
      ;; "/" 'helm-swoop
      "/" 'consult-outline
      ;; "s a f" 'helm-ag-r-current-file
      "s a f" 'counsel-ag
      ;; "s a g" 'helm-ag-r-from-git-repo 
      "s d" 'rg-dwim
      "s p" 'rg-project
      "s r" 'rg
      "s t" 'rg-literal
      "s l" 'rg-list-searches

      ;; toggles
      "t f" 'auto-fill-mode

      ;; quit
      "q q" 'save-buffers-kill-emacs

      ;; Register bindings
      ;; "r y" 'helm-show-kill-ring
      "r y" 'consult-yank-pop


      ;; Magit
      "g s" 'magit-status
      "g l" 'consult-line

      ;; GTD stuff
      "o g" (lambda() (interactive)(find-file "/Users/Z0041V0/deft/GTD.org"))
      )
    #+END_SRC
    
    1. Programming mode effective shortcuts
       #+begin_src emacs-lisp
         (general-define-key
          :states 'normal
          :prefix ","
          "w" 'save-buffer
          "l" 'next-buffer
          "h" 'previous-buffer)
       #+end_src

*** EVIL matlab
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert visual)
 :keymaps 'matlab-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"

 ;; Running 
 "p" 'matlab-shell
 ","  'vig/matlab-shell-send-line
 "r r" 'matlab-shell-run-region
 "r c" 'matlab-shell-run-cell

 ;; Commenting
 "i f" 'matlab-indent-function-body
 "i l" 'matlab-indent-line
 )
#+END_SRC
*** EVIL org 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'org-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"
 "e e" 'org-export-dispatch
 "n n" 'org-narrow-to-subtree
 "n w" 'widen

 ;; Citations
 "c" 'org-ref-helm-insert-cite-link
 "r" 'org-ref-helm-insert-ref-link)
 #+END_SRC
*** EVIL latex 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 :prefix ","
 :non-normal-prefix "M-S-SPC"

 ;; Building
 "," 'LaTeX-command-section
 "v" 'TeX-view
 "." 'LaTeX-mark-environment

 ;; previews
 "p e" 'preview-environment
 "p b" 'preview-buffer
 "p d" 'preview-document
 "p p" 'preview-at-point

 ;; preview / clear
 "p c r" 'preview-clearout
 "p c s" 'preview-clearout-section
 "p c p" 'preview-clearout-at-point

 ;; inserts
 "s" 'LaTeX-section
 "e" 'LaTeX-environment
 "c" 'LaTeX-close-environment

 ;; citation
 "r c" 'reftex-citation
 "r r" 'reftex-reference
 "r =" 'reftex-toc
 "r p" 'reftex-citep

 ;; fill
 "f s" 'LaTeX-fill-section
 "f p" 'LaTeX-fill-paragraph
 "f b" 'LaTeX-fill-buffer
 "f e" 'LaTeX-fill-environment
 )

(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 "<S-return>" 'LaTeX-insert-item)



#+END_SRC
*** EVIL commenting 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal insert emacs visual)
 :prefix "\\"
 :non-normal-prefix "M-S-\\"
 "l l" 'evilnc-quick-comment-or-uncomment-to-the-line
 "c c" 'evilnc-comment-or-uncomment-lines
 "c p" 'evilnc-comment-or-uncomment-paragraphs
 "c r" 'comment-or-uncomment-region
 "c v" 'evilnc-toggle-invert-comment-line-by-line
  "."  'evilnc-copy-and-comment-operator)
#+END_SRC
*** EVIL multilple cursors
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal)
 :prefix "SPC"
 :non-normal-prefix "M-S-m"
 "m w" 'mc/mark-next-word-like-this
 "m l" 'mc/mark-next-lines
 "m d" 'mc/mark-all-dwim
 "m c"  'mc/add-cursor-on-click)


(general-define-key
 :keymaps '(visual emacs insert)
 "M-d" 'mc/mark-next-word-like-this)
#+END_SRC
When in visual model (especially after selecting a word using =expand
region=, we could mark the next occurance of the word by pressing
=M-d=. 
*** EVIL Navigation
Setting up keybindings for the efficient navigation using =avy=
navigation functions. =avy-goto-char= lets you to navigate to any
arbitrary word in a buffer by just typing a few keystrokes - very fast
indeed in practise. 
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps '(normal)
 :prefix "SPC"
 :non-normal-prefix "M-S-SPC"
 "g g" 'avy-goto-char
 "g w" 'avy-goto-word-0
 "g b" 'avy-goto-char-2-above

 ;; ;; neotree
 ;; "t t" 'neotree-toggle
 ;; "t c" 'neotree-dir)
 

 ;; speedbar
 "t s" 'sr-speedbar-toggle)

(general-define-key
 :keymaps '(normal)
 "Q" 'delete-window)
#+END_SRC
